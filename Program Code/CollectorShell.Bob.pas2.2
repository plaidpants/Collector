Program CollectorShell;   {$U Jim Surine:Programming:Units:My Units:Axis}   {$U Jim Surine:Programming:Units:My Units:Dialogs}        {Dialog handler}   {$U Jim Surine:Programming:Units:My Units:RecordInteger}   {$U Jim Surine:Programming:Units:My Units:RecordReal}   {$U Jim Surine:Programming:Units:My Units:Histogram}      {The Collector uses histograms}   {$U Jim Surine:Programming:Units:My Units:MultiFileSelect}   {$R Jim Surine:Programming:Reasources:CollectorRsrc}   {$O Data:MultiStats}   {$S+}     uses    Memtypes,           {Basic types stanadard}    QuickDraw,          {Quickdraw standard}    OSIntf,             {Operating system standard}    ToolIntf,           {Tools standard}      PackIntf,           {Package stuff (List Manager, Decimal to string convert)}    MacPrint,           {Printer driver}    sane,               {For Real number conversions}    {$S MyPartOne}       Axis,    Dialogs,            {My Dialog Routines}    MultiFileSelect,    Histogram,    RecordInteger;{$S MyPart} const   PrintingID = 8093;        {info dialog used for non-spool printing}   FileCreator = 'NUMB';    Type   RecordIntegerPtr=^RecordIntegerType;   HistogramPtr=^HistogramType;      myHistogramInfoType=record              FirstNum:real;              SecondNum:Real;            end;   myRecordIntegerInfoType=record              Mean1,Mean2,Mean3,Mean4,Mean12,Mean21,Mean31,Mean13,Mean32,Mean23,Mean14,Mean24,Mean34,              sqS21,sqS22,sqS23,sqS24,sqS212,sqS221,sqS231,sqS213,sqS232,sqS223,sqS214,sqS224,sqS234:real;              NumberRecorded:integer;            end;             procedure GetTextReadFile (var reply : SFReply);     var      Thepoint : point;      FileTypeArray : SFTypeList;     begin    Thepoint.h := 50;    Thepoint.v := 50;      FileTypeArray[0] := 'TEXT';    SFGetFile(Thepoint, 'Text File to Open', nil, 1, FileTypeArray, nil, reply);    CancelButton := not Reply.Good;  end;procedure GetWriteFile (var reply : SFReply);     var      Thepoint : point;     begin    Thepoint.h := 50;    Thepoint.v := 50;    SFPutFile(Thepoint, 'Save Filename', Reply.Fname, nil, reply);    CancelButton := not Reply.Good;  end; procedure CheckResultError(ResultError:integer;            var error:Boolean);     var      TheError : str255;      TheString:StringHandle;        begin    if ResultError<>noerr then      begin        TheString:=GetString(10000-ResultError);        TheError:=TheString^^;        if TheError='' then          TheError:='Unknown error';        sysbeep(10);        OKDialog(TheError);        Error:=True;      end;  end; procedure ReadRecordIntegerText (Reply : SFReply;                var error:Boolean;                var TheRecordInteger:RecordIntegerType);    var      InFile:Text;      ResultError:integer;      DummyString:StringPtr;      OldVol:integer;      i:integer;      Dummy:str255;        begin    error:=False;         DummyString:=Nil;    ResultError:=GetVol(DummyString,OldVol);    CheckResulterror(ResultError,error);    if ResultError<>noerr then      OKDialog('Could not get current volume')    else      begin        DummyString:=Nil;        ResultError:=SetVol(DummyString,Reply.vRefNum);        CheckResulterror(ResultError,error);        if ResultError<>noerr then          OKDialog('Could not set to files volume')        else          begin            Reset(InFile,Reply.Fname);            CheckResulterror(IOResult,error);            if IOResult<>noerr then              OKDialog('Could not reset file')            else              begin                for i:=1 to 16 do                  Readln(InFile,Dummy);                                  LoadRecordIntegerAsText (TheRecordInteger,Reply,InFile);                                CheckResulterror(IOResult,error);                if IOResult<>noerr then                  OKDialog('Error during reading of data');              end;            Close(InFile);            CheckResulterror(IOResult,error);            if IOResult<>noerr then              OKDialog('Could not close file');          end;        DummyString:=Nil;        ResultError:=SetVol(DummyString,OldVol);        CheckResulterror(ResultError,error);        if ResultError<>noerr then          OKDialog('Could not Set volume back');      end;  end;  procedure WriteHistogramText (var Reply : SFReply;                  var error:Boolean;                  var Histogram:HistogramType);     var      OutFile:Text;      ResultError:integer;      DummyString:StringPtr;      OldVol:integer;      i:integer;        begin    error:=False;        DummyString:=Nil;    ResultError:=GetVol(DummyString,OldVol);    CheckResulterror(ResultError,error);    if ResultError<>noErr then      OKDialog('Could not get current volume')    else      begin        DummyString:=Nil;        ResultError:=SetVol(DummyString,Reply.vRefNum);        CheckResulterror(ResultError,error);        if ResultError<>noErr then          OKDialog('Could not set to correct volume')        else          begin            TextCreator:=FileCreator;            TextType:='TEXT';                        Rewrite(OutFile,Reply.Fname);  {Make sure there is a file}            CheckResulterror(IOResult,error);            if IOResult<>noErr then              OKDialog('Could not create dummy file')            else              begin                Close(OutFile);                CheckResulterror(IOResult,error);                if IOResult<>noErr then                  OKDialog('Could not close dummy file')                else                  begin                    ResultError:=FSDelete (Reply.Fname, Reply.vRefNum);                    CheckResulterror(ResultError,error);                    if ResultError<>noErr then                      OKDialog('Could not delete dummy file')                    else                      begin                        Rewrite(OutFile,Reply.Fname);                        CheckResulterror(IOResult,error);                        if IOResult<>noErr then                          OKDialog('Could not rewrite file')                        else                          begin                            {Dummy Header Stuff, first zero important, makes sure it's a histogram}                                                        for i:=1 to 10 do                              Writeln(OutFile,'0');                            Writeln(OutFile,'FALSE');                            Writeln(OutFile,'0');                                                        Writeln(OutFile,'20');                            Writeln(OutFile,'20');                            Writeln(OutFile,'200');                            Writeln(OutFile,'200');                            SaveHistogramAsText (Histogram,Reply,OutFile);                                                        CheckResulterror(IOResult,error);                            if IOResult<>noErr then                              OKDialog('error while writing data to disk');                          end;                        Close(OutFile);                        CheckResulterror(IOResult,error);                        if IOResult<>noErr then                          OKDialog('Could not close file');                      end;                  end;              end;          end;        DummyString:=Nil;        ResultError:=SetVol(DummyString,OldVol);        CheckResulterror(ResultError,error);        if ResultError<>noErr then          OKDIalog('Could not reset to application volume');      end;  end;  procedure WriteHistogramInfoFile (var Reply : SFReply;                  var error:Boolean;                  var TheHistogramInfo:myHistogramInfoType);     var      OutFile:Text;      ResultError:integer;      DummyString:StringPtr;      OldVol:integer;        begin    error:=False;        DummyString:=Nil;    ResultError:=GetVol(DummyString,OldVol);    CheckResulterror(ResultError,error);    if ResultError<>noErr then      OKDialog('Could not get current volume')    else      begin        DummyString:=Nil;        ResultError:=SetVol(DummyString,Reply.vRefNum);        CheckResulterror(ResultError,error);        if ResultError<>noErr then          OKDialog('Could not set to correct volume')        else          begin            TextCreator:=FileCreator;            TextType:='TEXT';                        Rewrite(OutFile,Reply.Fname);  {Make sure there is a file}            CheckResulterror(IOResult,error);            if IOResult<>noErr then              OKDialog('Could not create dummy file')            else              begin                Close(OutFile);                CheckResulterror(IOResult,error);                if IOResult<>noErr then                  OKDialog('Could not close dummy file')                else                  begin                    ResultError:=FSDelete (Reply.Fname, Reply.vRefNum);                    CheckResulterror(ResultError,error);                    if ResultError<>noErr then                      OKDialog('Could not delete dummy file')                    else                      begin                        Rewrite(OutFile,Reply.Fname);                        CheckResulterror(IOResult,error);                        if IOResult<>noErr then                          OKDialog('Could not rewrite file')                        else                          begin                                                            {Writeln(OutFile,TheInfo.FirstNum);}                            {Writeln(OutFile,TheInfo.SecondNum);}                                                        CheckResulterror(IOResult,error);                            if IOResult<>noErr then                              OKDialog('error while writing data to disk');                           end;                        Close(OutFile);                        CheckResulterror(IOResult,error);                        if IOResult<>noErr then                          OKDialog('Could not close file');                      end;                  end;              end;          end;        DummyString:=Nil;        ResultError:=SetVol(DummyString,OldVol);        CheckResulterror(ResultError,error);        if ResultError<>noErr then          OKDIalog('Could not reset to application volume');      end;  end;   procedure WriteRecordIntegerInfoFile (var Reply : SFReply;                  var error:Boolean;                  var TheRecordIntegerInfo:myRecordIntegerInfoType);     var      OutFile:Text;      ResultError:integer;      DummyString:StringPtr;      OldVol:integer;        begin    error:=False;        DummyString:=Nil;    ResultError:=GetVol(DummyString,OldVol);    CheckResulterror(ResultError,error);    if ResultError<>noErr then      OKDialog('Could not get current volume')    else      begin        DummyString:=Nil;        ResultError:=SetVol(DummyString,Reply.vRefNum);        CheckResulterror(ResultError,error);        if ResultError<>noErr then          OKDialog('Could not set to correct volume')        else          begin            TextCreator:=FileCreator;            TextType:='TEXT';                        Rewrite(OutFile,Reply.Fname);  {Make sure there is a file}            CheckResulterror(IOResult,error);            if IOResult<>noErr then              OKDialog('Could not create dummy file')            else              begin                Close(OutFile);                CheckResulterror(IOResult,error);                if IOResult<>noErr then                  OKDialog('Could not close dummy file')                else                  begin                    ResultError:=FSDelete (Reply.Fname, Reply.vRefNum);                    CheckResulterror(ResultError,error);                    if ResultError<>noErr then                      OKDialog('Could not delete dummy file')                    else                      begin                        Rewrite(OutFile,Reply.Fname);                        CheckResulterror(IOResult,error);                        if IOResult<>noErr then                          OKDialog('Could not rewrite file')                        else                          begin                            Write(OutFile,TheRecordIntegerInfo.Mean1:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean2:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean3:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean4:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean12:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean21:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean31:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean13:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean14:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean24:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean34:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.Mean32:9:9,Chr(9));                            Writeln(OutFile,TheRecordIntegerInfo.Mean23:9:9);                                                        Write(OutFile,TheRecordIntegerInfo.sqS21:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS22:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS23:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS24:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS212:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS221:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS231:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS213:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS214:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS224:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS234:9:9,Chr(9));                            Write(OutFile,TheRecordIntegerInfo.sqS232:9:9,Chr(9));                            Writeln(OutFile,TheRecordIntegerInfo.sqS223:9:9);                                                        Writeln(OutFile,TheRecordIntegerInfo.NumberRecorded:9);                                                        CheckResulterror(IOResult,error);                            if IOResult<>noErr then                              OKDialog('error while writing data to disk');                           end;                        Close(OutFile);                        CheckResulterror(IOResult,error);                        if IOResult<>noErr then                          OKDialog('Could not close file');                      end;                  end;              end;          end;        DummyString:=Nil;        ResultError:=SetVol(DummyString,OldVol);        CheckResulterror(ResultError,error);        if ResultError<>noErr then          OKDIalog('Could not reset to application volume');      end;  end;  procedure DoHistogramSaveAs(var Histogram:HistogramType);     var      Reply : SFReply;      error:Boolean;        begin    Reply.fname:='Untitled';    GetWriteFile(Reply);    if Reply.Good then      WriteHistogramtext(Reply,error,Histogram);  end;procedure DoRecordIntegerOpen(var TheRecordInteger:RecordIntegerType);     var      Reply : SfReply;      Error:Boolean;        begin    GetTextReadFile(Reply);    if Reply.good then      ReadRecordIntegerText(Reply,error,TheRecordInteger);  end;  Function Deramp(TheRecordInteger:RecordIntegerType;                  TheLoc,                  WhichOne:integer):Real;  var  A,B,C:real;   begin    case WhichOne of    1:      begin        a:=1056.652;        b:=135.636;        c:=15.922;      end;    2:      begin        a:=1069.67;        b:=152.433;        c:=58.437;      end;    3:      Begin        a:=1065.652;        b:=136.86;        c:=16.219;      end;    4:      Begin        a:=1047.4;        b:=128.8;        c:=17.306;      end;  end;  Deramp:=B*(EXP((TheRecordInteger.RecordIntegerData[WhichOne+TheLoc*3]-C)/A)-1); end; Procedure ProcessHistogram(var TheHistogram:HistogramType;    var TheFile:SFReply);      var     TheHistogramInfo:MyHistogramInfoType;    TempFile:SFReply;    i:integer;    error:Boolean;      begin    for i:=1 to 30 do      writeln;    DrawHistogram(TheHistogram);    TempFile:=TheFile;    TempFile.Fname:=TempFile.Fname+'.Hst';    WriteHistogramtext(TempFile,error,TheHistogram);      {DoPrintSetUp:=False;}{Don't put up print dialog box just print it}    {DoPrintHistogram(TheHistogram);}        {Do Calc for Histograminfo}        {TempFile:=TheFile;    TempFile.Fname:=TempFile.Fname+'.HstInfo';      WriteHistogramInfoFile(TheHistogramInfoFile,error,TheHistogramInfo);}  end;  Procedure ProcessRecordInteger(var TheRecordInteger:RecordIntegerType;                      var TheFile:SFReply);var   TheHistogramPointers:Array [1..13] of HistogramPtr;   Deramp1,Deramp2,Deramp3,Deramp4,SumDeramp1,SumDeramp3,SumDeramp2,SumDeramp4,   SumDeramp12,SumDeramp21,SumDeramp31,SumDeramp13,SumDeramp32,SumDeramp23,SumDeramp14,SumDeramp24,SumDeramp34,   S21,S22,S23,S24,S212,S221,S231,S213,S232,S223,S214,S224,S234,   Ratio12,Ratio21,Ratio31,Ratio13,Ratio32,Ratio23,Ratio14,Ratio24,Ratio34:real;   i,j:integer;   error:boolean;   TheRecordIntegerInfo:myRecordIntegerInfoType;   TempFile:SFReply;   TheRecordIntegerInfoFile:SFReply;   begin  writeln('number recorded  ',TheRecordInteger.NumberRecorded,'  The File: ',TheFile.fName);  {for i:= 0 to 14 do    begin      for j:= 1 to 4 do        write(TheRecordInteger.RecordIntegerData[j+i*4],'   ');      writeln;    end;}  for i:=1 to 13 do    TheHistogramPointers[i]:=HistogramPtr(NewPtr(SizeOf(HistogramType)));    with TheHistogramPointers[1]^.HistogramInfo do    begin      LowerDataBound :=0;      UpperDataBound :=4000;      LowerDataInclude := true;      UpperDataInclude := true;      NumberOfDataBins :=1000;      Title :='A raw data histogram plot';      LowerDisplayBound:= 0;      UpperDisplayBound := 4000;      LowerDisplayInclude :=true;      UpperDisplayInclude :=true;      NumberOfDisplayBins :=100;      LowerVerticleBound:=0; {zero both for auto scaling}      UpperVerticleBound:=0;       DrawOption:=0;    end;      for i:=1 to 4 do    InitHistogram (TheHistogramPointers[i]^ ,TheHistogramPointers[1]^.HistogramInfo);  with TheHistogramPointers[5]^.HistogramInfo do    begin      LowerDataBound :=-1;      UpperDataBound :=6;      LowerDataInclude := true;      UpperDataInclude := true;      NumberOfDataBins :=700;      Title :='A ratio of raw data histogram plot';      LowerDisplayBound:= -1;      UpperDisplayBound := 6;      LowerDisplayInclude :=true;      UpperDisplayInclude :=true;      NumberOfDisplayBins :=100;      LowerVerticleBound:=0; {zero both for auto scaling}      UpperVerticleBound:=0;       DrawOption:=0;    end;  for i:= 5 to 13 do    InitHistogram (TheHistogramPointers[i]^ ,TheHistogramPointers[5]^.HistogramInfo);    SumDeramp1:=0;  SumDeramp2:=0;  SumDeramp3:=0;  SumDeramp4:=0;  SumDeramp12:=0;  SumDeramp21:=0;  SumDeramp31:=0;  SumDeramp13:=0;  SumDeramp32:=0;  SumDeramp23:=0;  SumDeramp14:=0;  SumDeramp24:=0;  SumDeramp34:=0;          for i:= 0 to (TheRecordInteger.NumberRecorded-1) do    begin      Deramp1:=Deramp(TheRecordInteger,i,1);      Deramp2:=Deramp(TheRecordInteger,i,2);      Deramp3:=Deramp(TheRecordInteger,i,3);      Deramp3:=Deramp(TheRecordInteger,i,4);      Ratio12:=Deramp1/Deramp2;      Ratio21:=Deramp2/Deramp1;      Ratio31:=Deramp3/Deramp1;       Ratio13:=Deramp1/Deramp3;      Ratio32:=Deramp3/Deramp2;      Ratio23:=Deramp2/Deramp3;      Ratio23:=Deramp1/Deramp4;      Ratio23:=Deramp2/Deramp4;      Ratio23:=Deramp3/Deramp4;      SumDeramp1:=SumDeramp1+Deramp1;      SumDeramp2:=SumDeramp2+Deramp2;      SumDeramp3:=SumDeramp3+Deramp3;      SumDeramp4:=SumDeramp4+Deramp4;      SumDeramp12:=SumDeramp12+Ratio12;      SumDeramp21:=SumDeramp21+Ratio21;      SumDeramp31:=SumDeramp31+Ratio31;      SumDeramp13:=SumDeramp13+Ratio13;      SumDeramp32:=SumDeramp32+Ratio32;      SumDeramp23:=SumDeramp23+Ratio23;      SumDeramp14:=SumDeramp14+Ratio14;      SumDeramp24:=SumDeramp24+Ratio24;      SumDeramp34:=SumDeramp34+Ratio34;      AddToHistogram(TheHistogramPointers[1]^,Deramp1,1);      AddToHistogram(TheHistogramPointers[2]^,Deramp2,1);      AddToHistogram(TheHistogramPointers[3]^,Deramp3,1);      AddToHistogram(TheHistogramPointers[4]^,Deramp4,1);      AddToHistogram(TheHistogramPointers[5]^,Ratio12,1);      AddToHistogram(TheHistogramPointers[6]^,Ratio21,1);      AddToHistogram(TheHistogramPointers[7]^,Ratio31,1);      AddToHistogram(TheHistogramPointers[8]^,Ratio13,1);      AddToHistogram(TheHistogramPointers[9]^,Ratio32,1);      AddToHistogram(TheHistogramPointers[10]^,Ratio23,1);      AddToHistogram(TheHistogramPointers[11]^,Ratio14,1);      AddToHistogram(TheHistogramPointers[12]^,Ratio24,1);      AddToHistogram(TheHistogramPointers[13]^,Ratio34,1);    end;         TheRecordIntegerInfo.Mean1:=SumDeramp1/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean2:=SumDeramp2/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean3:=SumDeramp3/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean4:=SumDeramp4/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean12:=SumDeramp12/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean21:=SumDeramp21/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean31:=SumDeramp31/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean13:=SumDeramp13/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean32:=SumDeramp32/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean23:=SumDeramp23/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean14:=SumDeramp14/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean24:=SumDeramp24/TheRecordInteger.NumberRecorded;  TheRecordIntegerInfo.Mean34:=SumDeramp34/TheRecordInteger.NumberRecorded;    S21:=0;  S22:=0;  S23:=0;  S24:=0;  S212:=0;  S221:=0;  S231:=0;  S213:=0;  S232:=0;  S223:=0;  S214:=0;  S224:=0;  S234:=0;  for i:= 0 to (TheRecordInteger.NumberRecorded-1) do    begin      Deramp1:=Deramp(TheRecordInteger,i,1);      Deramp2:=Deramp(TheRecordInteger,i,2);      Deramp3:=Deramp(TheRecordInteger,i,3);      Deramp3:=Deramp(TheRecordInteger,i,4);      Ratio12:=Deramp1/Deramp2;      Ratio21:=Deramp2/Deramp1;      Ratio31:=Deramp3/Deramp1;       Ratio13:=Deramp1/Deramp3;      Ratio32:=Deramp3/Deramp2;      Ratio23:=Deramp2/Deramp3;      Ratio23:=Deramp1/Deramp4;      Ratio23:=Deramp2/Deramp4;      Ratio23:=Deramp3/Deramp4;      S21:=S21+((Deramp1-TheRecordIntegerInfo.Mean1)*(Deramp1-TheRecordIntegerInfo.Mean1));      S22:=S22+((Deramp2-TheRecordIntegerInfo.Mean2)*(Deramp2-TheRecordIntegerInfo.Mean2));      S23:=S23+((Deramp3-TheRecordIntegerInfo.Mean3)*(Deramp3-TheRecordIntegerInfo.Mean3));      S24:=S24+((Deramp4-TheRecordIntegerInfo.Mean4)*(Deramp4-TheRecordIntegerInfo.Mean4));      S212:=S212+((Ratio12-TheRecordIntegerInfo.Mean12)*(Ratio12-TheRecordIntegerInfo.Mean12));      S221:=S221+((Ratio21-TheRecordIntegerInfo.Mean21)*(Ratio21-TheRecordIntegerInfo.Mean21));      S231:=S231+((Ratio31-TheRecordIntegerInfo.Mean31)*(Ratio31-TheRecordIntegerInfo.Mean31));      S213:=S213+((Ratio13-TheRecordIntegerInfo.Mean13)*(Ratio13-TheRecordIntegerInfo.Mean13));      S232:=S232+((Ratio32-TheRecordIntegerInfo.Mean32)*(Ratio32-TheRecordIntegerInfo.Mean32));      S223:=S223+((Ratio23-TheRecordIntegerInfo.Mean23)*(Ratio23-TheRecordIntegerInfo.Mean23));      S214:=S214+((Ratio14-TheRecordIntegerInfo.Mean23)*(Ratio14-TheRecordIntegerInfo.Mean14));      S224:=S224+((Ratio24-TheRecordIntegerInfo.Mean24)*(Ratio24-TheRecordIntegerInfo.Mean24));      S234:=S234+((Ratio34-TheRecordIntegerInfo.Mean34)*(Ratio34-TheRecordIntegerInfo.Mean34));    end;    TheRecordIntegerInfo.sqS21:=Sqrt(S21/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS22:=Sqrt(S22/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS23:=Sqrt(S23/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS24:=Sqrt(S24/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS212:=Sqrt(S212/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS221:=Sqrt(S221/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS231:=Sqrt(S231/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS213:=Sqrt(S213/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS232:=Sqrt(S232/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS223:=Sqrt(S223/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS214:=Sqrt(S214/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS224:=Sqrt(S224/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.sqS234:=Sqrt(S234/(TheRecordInteger.NumberRecorded-1));  TheRecordIntegerInfo.NumberRecorded:=TheRecordInteger.NumberRecorded;    TheRecordIntegerInfoFile:=TheFile;  TheRecordIntegerInfoFile.Fname:=TheRecordIntegerInfoFile.Fname+'.RecIntInfo';    WriteRecordIntegerInfoFile(TheRecordIntegerInfoFile,error,TheRecordIntegerInfo);  for i:=1 to 13 do    begin      TempFile:=TheFile;      TempFile.Fname:=TempFile.Fname+'.'+chr(Ord('0')+i);            ProcessHistogram(TheHistogramPointers[i]^,TempFile);    end;  Writeln;  Writeln('Tube 1 Deramped: Mean = ',TheRecordIntegerInfo.Mean1:8:4,' S = ',Sqrt(S21):8:4);  Writeln('Tube 2 Deramped: Mean = ',TheRecordIntegerInfo.Mean2:8:4,' S = ',Sqrt(S22):8:4);  Writeln('Tube 3 Deramped: Mean = ',TheRecordIntegerInfo.Mean3:8:4,' S = ',Sqrt(S23):8:4);  Writeln('Tube 4 Deramped: Mean = ',TheRecordIntegerInfo.Mean4:8:4,' S = ',Sqrt(S24):8:4);  Writeln('Tube 1/Tube 2 Deramped: Mean = ',TheRecordIntegerInfo.Mean12:8:4,' S = ',Sqrt(S212):8:6);  Writeln('Tube 2/Tube 1 Deramped: Mean = ',TheRecordIntegerInfo.Mean21:8:4,' S = ',Sqrt(S221):8:6);  Writeln('Tube 3/Tube 1 Deramped: Mean = ',TheRecordIntegerInfo.Mean31:8:4,' S = ',Sqrt(S231):8:6);  Writeln('Tube 1/Tube 3 Deramped: Mean = ',TheRecordIntegerInfo.Mean13:8:4,' S = ',Sqrt(S213):8:6);  Writeln('Tube 3/Tube 2 Deramped: Mean = ',TheRecordIntegerInfo.Mean32:8:4,' S = ',Sqrt(S232):8:6);  Writeln('Tube 2/Tube 3 Deramped: Mean = ',TheRecordIntegerInfo.Mean23:8:4,' S = ',Sqrt(S223):8:6);  Writeln('Tube 1/Tube 4 Deramped: Mean = ',TheRecordIntegerInfo.Mean14:8:4,' S = ',Sqrt(S214):8:6);  Writeln('Tube 2/Tube 4 Deramped: Mean = ',TheRecordIntegerInfo.Mean24:8:4,' S = ',Sqrt(S224):8:6);  Writeln('Tube 3/Tube 4 Deramped: Mean = ',TheRecordIntegerInfo.Mean34:8:4,' S = ',Sqrt(S234):8:6);  for i:= 1 to 13 do      DisposPtr(ptr(TheHistogramPointers[i]));end;procedure DoMultiRecordIntegerOpen;   var    Reply : SfReply;    Error:Boolean;    TheRecordIntegerPointer:RecordIntegerPtr;    mydirID : longint;    Cancel : boolean;    files : FileListHdl;    NumberOfFiles:integer;    i:integer;        begin    TheRecordIntegerPointer:=RecordIntegerPtr(NewPtr(SizeOf(RecordIntegerType)));    files := FileListHdl(newhandle(SizeOf(FileListtype)));    getfolder(mydirid,Cancel);    if Not Cancel then      begin        getallinfolder(mydirid, files, NumberOfFiles);        for i:= 1 to NumberOfFiles do          begin            hLock(Handle(Files));            ReadRecordIntegerText (files^^[i],error,TheRecordIntegerPointer^);            if not error then              ProcessRecordInteger(TheRecordIntegerPointer^,files^^[i]);            HUnlock(Handle(Files));          end;      end;    DisposHandle(Handle(files));    DisposPtr(ptr(TheRecordIntegerPointer));  end;  begin  doMultiRecordIntegerOpen;end.