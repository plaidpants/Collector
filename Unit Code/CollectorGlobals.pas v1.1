unit CollectorGlobals(-7352);interface {$U-} {Use My own include Librarys} {$U Jim Surine:Programming:Units:My Units:Dialogs} {$U Jim Surine:Programming:Units:My Units:Patterns} {$U Jim Surine:Programming:Units:My Units:Axis2} {$U Jim Surine:Programming:Units:Mews Units:Serial} {$U Jim Surine:Programming:Units:My Units:Histogram} {$U Jim Surine:Programming:Units:My Units:GrayScale} {$U Jim Surine:Programming:Units:My Units:RecordInteger} {$U Jim Surine:Programming:Units:My Units:RecordReal} {$U Jim Surine:Programming:Units:My Units:RecordLongInt} {$U Jim Surine:Programming:Units:My Units:Plot} {$U Jim Surine:Programming:Units:My Units:AutoRecord} {$I-} {$O Jim Surine:Programming:Units:My Units:CollectorGlobals} uses Memtypes,            {Basic types stanadard} QuickDraw,           {Quickdraw standard} OSIntf,              {Operating system standard} ToolIntf,            {Tools standard}  PackIntf,            {Package stuff (List Manager, Decimal to string convert)} sane,                {For Real number conversions}   PasInOut,  Dialogs, Serial, Patterns, Axis2, Histogram, GrayScale, RecordInteger, RecordReal, RecordLongInt, Plot, AutoRecord; type  dataType = record    case integer of     0 : (       Histogram : HistogramType     );     1 : (       GrayScale : GrayScaleType     );     2 : (       RecordInteger : RecordIntegerType     );     3 : (       RecordReal : RecordRealType     );     4 : (       AutoRecord : AutoRecordType     );       end; TypeOfDataType=array [1..10] of integer;            windowDataInfoType=record    TypeOfData:TypeOfDataType;    Collecting : Boolean;    RedrawDelay : integer;    end;      WDHandle = ^WDPtr;  WDPtr = ^WindowDataType;  WindowDataType = record    LastRedraw : LongInt;        Reply : SFReply;    OnDisk : Boolean;    Changed : boolean;        WindowLoc:Point;    WindowSize:Point;    MaxSized:Boolean;        WindowDataInfo : WindowDataInfoType;    WindowData : DataType;   end;      {Extra event stuff for stack}        MWPCDataType = packed array[0..35] of byte;  MWPCFrameType = record    MWPCData:MWPCDataType;   end;    MWPCDecodeType = record      SumOfWires:integer;    end;    EEDataType= packed array[0..17] of integer;    EEFrameType= packed record                  EEID1:integer;                  EEID2:integer;                  EEevent:integer;                  EEData:EEDataType;               end;     EEDecodeType= packed record                    EEValues:EEDataType;                    EEValuesDecoded:packed array[0..17] of boolean;                  end;                    EErampDecodeType= packed record                      EErampValues:packed array[0..17] of real;                      EErampValuesDecoded:packed array[0..17] of boolean;                    end;                  FrameBufferType= Packed Array[1..50] of byte;    FrameType = packed record    case integer of     1 : (       MWPC : MWPCFrameType     );     2 : (       EEframe : EEFrameType     );     3 : (       FrameBuffer : FrameBufferType;     );   end;  LastFrameType= record    Frame:FrameType;    Found:Boolean;    EventNumber:integer;    IDNumber:byte;   end;      {Event type}      StackEventType =     packed record    EventNumber:Integer;    MWPCFrame : packed array[1..3] of MWPCFrameType;    MWPCFrameFound : Packed array[1..3] of Boolean;    MWPCDecode:EEDecodeType;    EEFrame : EEFrameType;    EEFrameFound:Boolean;    EEDecode:EEDecodeType;    EEDecodeSumFound:Boolean;    EEDecodeSum:Real;    EErampDecode:EErampDecodeType;   end;  TapeEventType = StackEventType;       TDCEventType = Array [0..15] of              record                  DataA:Integer;                  DataB:Byte;                  ADCEvent:LongInt;                  Found:Boolean;              end;    ADCEventType=LongInt;  EventType = packed record    case integer of    0:(StackEvent:StackEventType);    1:(TapeEvent:TapeEventType);    2:(TDCEvent:TDCeventType);    3:(ADCEvent:ADCEventType);    end;     Var    IgnoreErrorCheck:Boolean; {Used to overide dialog check user questions}    DefaultWindowDatainfo:WindowDatainfoType;   implementationbeginend.