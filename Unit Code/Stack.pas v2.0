unit Stack(-2342);interface {$U-} {Use My own include Librarys}  {$U Jim Surine:Programming:Units:My Units:Dialogs} {$U Jim Surine:Programming:Units:My Units:Patterns} {$U Jim Surine:Programming:Units:My Units:Axis2} {$U Jim Surine:Programming:Units:Mews Units:Serial} {$U Jim Surine:Programming:Units:My Units:Histogram} {$U Jim Surine:Programming:Units:My Units:GrayScale} {$U Jim Surine:Programming:Units:My Units:RecordInteger} {$U Jim Surine:Programming:Units:My Units:RecordReal} {$U Jim Surine:Programming:Units:My Units:RecordLongInt} {$U Jim Surine:Programming:Units:My Units:Plot} {$U Jim Surine:Programming:Units:My Units:AutoRecord} {$U Jim Surine:Programming:Units:My Units:CollectorGlobals} {$I-} {$O Jim Surine:Programming:Units:My Units:Stack}uses Memtypes,            {Basic types stanadard} QuickDraw,           {Quickdraw standard} OSIntf,              {Operating system standard} ToolIntf,            {Tools standard}  PackIntf,          {Package stuff (List Manager, Decimal to string convert)} sane,              {For Real number conversions}   PasInOut,  Dialogs, Serial, Patterns, Axis2, Histogram, GrayScale, RecordInteger, RecordReal, RecordLongInt, Plot, AutoRecord, collectorGlobals;    const   WIndowTypeID=5401;     {Standard data window}   oldWIndowTypeID=17679;     {Standard data window}Var  LastFrame:LastFrameType;  {Used with read event}  Procedure StackAddToWindow(var TheWindowData:WindowDataType;                    TheEvent:EventType;                    ThePort:WindowPtr);procedure StackinitHistograminfo(var TheWindowData:WindowDataType;                    ThePort:WIndowPtr);procedure StackInitGrayScaleinfo(var TheWindowData:WindowDataType;                    ThePort:WindowPtr);procedure StackInitRecordIntegerinfo(var TheWindowData:WindowDataType;                    ThePort:WindowPtr);                    procedure StackInitRecordRealinfo(var TheWindowData:WindowDataType;                    ThePort:WindowPtr);procedure StackWindowTypeDialog (var TheWindowDataInfo : WindowDataInfoType);procedure StackInit;procedure StackClose; procedure StackReadEvent(var TheEvent:EventType;     var Error:Boolean);     implementation  {*************************Procedures for add to window*************}    function DecodeEE(WhichOne:integer;                  var TheEvent:EventType):integer;  begin    if TheEvent.StackEvent.EEDecode.EEvaluesDecoded[WhichOne] then      DecodeEE:=TheEvent.StackEvent.EEDecode.EEvalues[WhichOne]    else      begin        TheEvent.StackEvent.EEDecode.EEvalues[WhichOne]:=BitAnd(TheEvent.StackEvent.EEFrame.EEdata[WhichOne]+32768,$0FFF);        DecodeEE:=TheEvent.StackEvent.EEDecode.EEvalues[WhichOne];        TheEvent.StackEvent.EEDecode.EEvaluesDecoded[WhichOne]:=true;      end;  end;   function DecodeEEramp(WhichOne:integer;                  var TheEvent:EventType):real;  var    thevalue:integer;    a,b,c,d,e,f:real;      begin    if not TheEvent.StackEvent.EErampDecode.EErampvaluesDecoded[WhichOne] then      begin        if not TheEvent.StackEvent.EEDecode.EEvaluesDecoded[WhichOne] then          TheValue:=DecodeEE(WhichOne,TheEvent)        else          TheValue:=TheEvent.StackEvent.EEDecode.EEvalues[WhichOne];                  Case WhichOne of          10:            begin              a:=1057.086446;              b:=134.29983;              c:=4.944925;            end;          12:            begin              a:=1075.09;              b:=155.682;              c:=63.8034;            end;          14:            begin              a:=1065.652;              b:=136.86;              c:=16.219;            end;          15:            begin              a:=1047.4;              b:=128.8;              c:=17.306;            end;          end;        TheEvent.StackEvent.EErampDecode.EErampvalues[WhichOne]:=          b*(exp((TheValue-c)/a)-1);      end;             DecodeEEramp:=TheEvent.StackEvent.EErampDecode.EErampvalues[WhichOne];  end; function DecodeEEsumramp(var TheEvent:EventType):real;  begin    if not TheEvent.StackEvent.EEDecodeSumfound then      begin        TheEvent.StackEvent.EEDecodeSum:=            DecodeEEramp(10,TheEvent)+DecodeEEramp(12,TheEvent)+DecodeEEramp(14,TheEvent)+DecodeEEramp(15,TheEvent);        TheEvent.StackEvent.EEDecodeSumfound:=True;      end;    DecodeEEsumramp:=TheEvent.StackEvent.EEDecodeSum;  end;    function DecodeMWPC(WhichOne:integer;                  var TheEvent:EventType):integer;  begin  end;  Procedure StackAddToWindow{(var TheWindowData:WindowDataType;                    TheEvent:EventType;                    ThePort:WindowPtr)};    var     NumberX,    NumberY:Real;    Numbers:RecordIntegerDataType;    Number:RecordRealDataType;    i:integer;    OldPort:WIndowPtr;    error:Boolean;        begin       GetPort(OldPort);      case TheWindowData.WindowDataInfo.TypeOfData[1] of        0:          begin            case TheWindowData.WindowDataInfo.TypeOfData[2] of              0:                 NumberX:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);              1:                NumberX:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);              2:                NumberX:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);              3:                NumberX:=DecodeEEsumramp(TheEvent);              4:                NumberX:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent)                        /DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);              5:                NumberX:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent)                        /DecodeEEsumramp(TheEvent);            end;            NumberX:=NumberX*TheWindowData.WindowDataInfo.TypeOfData[9];            AddToHistogram(TheWindowData.WindowData.Histogram,NumberX,1,ThePort);          end;        1:          begin            case TheWindowData.WindowDataInfo.TypeOfData[2] of              0:                 begin                    NumberX:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);                    NumberY:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                end;              1:                begin                     NumberX:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);                    NumberY:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                end;              2:                begin                    NumberX:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);                    NumberY:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                end;              3:                begin                    NumberX:=DecodeEEsumramp(TheEvent);                    NumberY:=DecodeEEsumramp(TheEvent);                end;              4:                begin                    NumberX:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent)                        /DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                    NumberY:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[5],TheEvent)                        /DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[6],TheEvent);                end;              5:                begin                     NumberX:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent)                        /DecodeEEsumramp(TheEvent);                     NumberY:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent)                        /DecodeEEsumramp(TheEvent);                end;            end;            NumberX:=NumberX*TheWindowData.WindowDataInfo.TypeOfData[9];            NumberY:=NumberY*TheWindowData.WindowDataInfo.TypeOfData[9];            AddtoGrayScale(TheWindowData.WindowData.GrayScale,NumberX,NumberY,1,ThePort);          end;        2:          begin            case TheWindowData.WindowDataInfo.TypeOfData[2] of              0:                 begin                  Numbers[1]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);                  Numbers[2]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                  Numbers[3]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[5],TheEvent);                  Numbers[4]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[6],TheEvent);                  Numbers[5]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[7],TheEvent);                end;              1:                 begin                  Numbers[1]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);                  Numbers[2]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                  Numbers[3]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[5],TheEvent);                  Numbers[4]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[6],TheEvent);                              Numbers[5]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[7],TheEvent);                           end;              2:                 begin                  for i:= 1 to 5 do                    Numbers[1]:=trunc(DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[i+2],TheEvent)                        *TheWindowData.WindowDataInfo.TypeOfData[9]);                end;              3:                Numbers[1]:=trunc(DecodeEEsumramp(TheEvent)*TheWindowData.WindowDataInfo.TypeOfData[9]);              4:                begin                  Numbers[1]:=trunc(DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent)                        /DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent)                        *TheWindowData.WindowDataInfo.TypeOfData[9]);                  Numbers[2]:=trunc(DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[5],TheEvent)                        /DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[6],TheEvent)                        *TheWindowData.WindowDataInfo.TypeOfData[9]);                end;              5:                begin                  NumberX:=DecodeEEsumramp(TheEvent);                  for i:= 1 to 5 do                    Numbers[i]:=trunc(DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[i+2],TheEvent)/NumberX                        *TheWindowData.WindowDataInfo.TypeOfData[9]);                end;            end;            AddToRecordInteger(TheWindowData.WindowData.RecordInteger,Numbers,ThePort,Error);          end;        3:          begin            case TheWindowData.WindowDataInfo.TypeOfData[2] of              0:                 begin                  Number[1]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);                  Number[2]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                  Number[3]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[5],TheEvent);                  Number[4]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[6],TheEvent);                  Number[5]:=DecodeMWPC(TheWindowData.WindowDataInfo.TypeOfData[7],TheEvent);                end;              1:                 begin                  Number[1]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent);                  Number[2]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent);                  Number[3]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[5],TheEvent);                  Number[4]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[6],TheEvent);                              Number[5]:=DecodeEE(TheWindowData.WindowDataInfo.TypeOfData[7],TheEvent);                           end;              2:                 begin                  for i:= 1 to 5 do                    Number[1]:=trunc(DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[i+2],TheEvent)                        *TheWindowData.WindowDataInfo.TypeOfData[9]);                end;              3:                Number[1]:=DecodeEEsumramp(TheEvent);              4:                begin                  Number[1]:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[3],TheEvent)                        /DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[4],TheEvent)                        *TheWindowData.WindowDataInfo.TypeOfData[9];                  Number[2]:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[5],TheEvent)                        /DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[6],TheEvent)                        *TheWindowData.WindowDataInfo.TypeOfData[9];                end;              5:                begin                  NumberX:=DecodeEEsumramp(TheEvent);                  for i:= 1 to 5 do                    Number[i]:=DecodeEEramp(TheWindowData.WindowDataInfo.TypeOfData[i+2],TheEvent)/NumberX                        *TheWindowData.WindowDataInfo.TypeOfData[9];                end;            end;            AddToRecordReal(TheWindowData.WindowData.RecordReal,Number,ThePort,error);          end;      end;      SetPort(OldPort);    end;  {*************init windowDataWindowData procedures **************} procedure StackinitHistograminfo{(var TheWindowData:WindowDataType;                    ThePort:WindowPtr)}; {inits the histogram info record according to typeofdata[2] (0-MWPC 1-EE) and typeofdata[3] (# of MWPC or EE)}  var   TheString:str255;   seconds:longInt;    begin  with TheWindowData.windowdata.Histogram.HistogramInfo do   begin    case TheWindowData.WindowDataInfo.TypeOfData[2] of      0:      begin        LowerDataBound := 0;        UpperDataBound := 4095;        NumberOfDataBins := 4095;                UpperdataInclude := true;        LowerdataInclude := true;                NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='MWPC device #'+TheString+' histogram plot';                GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 500;        NumberOfDisplayBins := 5;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;  {Default scaling}        UpperVerticleBound:=0;      end;    1:      begin        LowerDataBound := 0;        UpperDataBound := 4095;        NumberOfDataBins := 4095;                UpperdataInclude := true;        LowerdataInclude := true;            NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='EE device #'+TheString+' histogram plot';                  GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 4095;        NumberOfDisplayBins := 50;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;   2:      begin        LowerDataBound := 0;        UpperDataBound := 4095;        NumberOfDataBins := 4095;                UpperdataInclude := true;        LowerdataInclude := true;            NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='EE deramped device #'+TheString+' histogram plot';                  GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 4095;        NumberOfDisplayBins := 50;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;    3:      begin        LowerDataBound := 0;        UpperDataBound := 4095;        NumberOfDataBins := 4095;                UpperdataInclude := true;        LowerdataInclude := true;            NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='EE deramped device sum #'+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);        Title:=Title+' #'+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);        Title:=Title+' #'+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[6],TheSTring);        Title:=Title+' #'+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[7],TheSTring);        Title:=Title+' #'+TheString+' histogram plot';                  GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 4095;        NumberOfDisplayBins := 50;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;    4:      begin        LowerDataBound := 0;        UpperDataBound := 4095;        NumberOfDataBins := 4095;                UpperdataInclude := true;        LowerdataInclude := true;            NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='EE deramped device #'+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);        Title:=Title+' divided by #'+TheString+' histogram plot';                  GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 4095;        NumberOfDisplayBins := 50;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;    5:      begin        LowerDataBound := 0;        UpperDataBound := 4095;        NumberOfDataBins := 4095;                UpperdataInclude := true;        LowerdataInclude := true;            NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='EE deramped device #'+TheString+' divided by sum of #10 #12 #14 histogram plot';                  GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 4095;        NumberOfDisplayBins := 50;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;    otherwise      begin        LowerDataBound := 0;        UpperDataBound := 4095;        NumberOfDataBins := 4095;                UpperdataInclude := true;        LowerdataInclude := true;        Title:='default histogram plot';                  GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 4095;        NumberOfDisplayBins := 50;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;     end;   end; end;   procedure StackinitGrayScaleinfo{(var TheWindowData:WindowDataType;                    ThePort:WindowPtr)};  {inits the GrayScale info record according to   X cross plot typeofdata[2] (0-MWPC 1-EE) typeofdata[3] (# of MWPC or EE)  Y cross plot typeofdata[4] (0-MWPC 1-EE) typeofdata[4] (# of MWPC or EE)} var  TheString:Str255;  Seconds:Longint;   begin  with TheWindowData.windowdata.GrayScale.GrayScaleInfo do   begin    case TheWindowData.WindowDataInfo.TypeOfData[2] of         0:      begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);       Title:='MWPC #'+TheString;       NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);       Title:=Title+' vs MWPC #'+TheString+' Gray Scale Plot';       GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;     end;     1:      begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);       Title:='EE device #'+TheString;       NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);       Title:=Title+' vs EE device #'+TheString+' Gray Scale Plot';       GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;     end;          2:      begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);       Title:='EE device ramp #'+TheString;       NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);       Title:=Title+' vs EE device ramp #'+TheString+' Gray Scale Plot';       GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;     end;     3:      begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);       Title:='EE device sum ramp#'+TheString;       NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);       Title:=Title+' vs EE device sum ramp#'+TheString+' Gray Scale Plot';       GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;     end;     4:      begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);       Title:='EE device ramp divide#'+TheString;       NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);       Title:=Title+' vs EE device ramp divide#'+TheString+' Gray Scale Plot';       GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;     end;     5:      begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);       Title:='EE device ramp divide sum#'+TheString;       NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);       Title:=Title+' vs EE device ramp divide sum#'+TheString+' Gray Scale Plot';       GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;     end;    otherwise      begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              Title:='Default Gray Scale Plot';              GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;      end;     end;   end; end;procedure StackInitRecordIntegerinfo{(var TheWindowData:WindowDataType;                    ThePort:WindowPtr)}; var  TheString:Str255;  Seconds:Longint;  begin    with TheWindowData.windowdata.RecordInteger.RecordIntegerInfo do      begin        NumberPerRecord:=4;        NumberToRecord := 10000;                NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='EE device #'+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);        Title:=Title+' '+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);        Title:=Title+' '+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[6],TheSTring);        Title:=Title+' '+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[7],TheSTring);        Title:=Title+' '+TheString+' integers recorded';        GetDateTime(Seconds);        IUDateString(Seconds,shortdate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;        DrawOption:=0;      end;  end;procedure StackInitRecordRealinfo{(var TheWindowData:WindowDataType;                    ThePort:WindowPtr)}; var  TheString:Str255;  Seconds:Longint;  begin    with TheWindowData.windowdata.RecordReal.RecordRealInfo do      begin        NumberPerRecord:=4;        NumberToRecord := 1000;                NumToString(TheWindowData.WindowDataInfo.TypeOfData[3],TheSTring);        Title:='EE device #'+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);        Title:=Title+' '+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);        Title:=Title+' '+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[6],TheSTring);        Title:=Title+' '+TheString;        NumToString(TheWindowData.WindowDataInfo.TypeOfData[7],TheSTring);        Title:=Title+' '+TheString+' reals recorded';        GetDateTime(Seconds);        IUDateString(Seconds,shortdate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;        DrawOption:=0;      end;  end;     procedure StackSetGetWindowTypeDialog (var   TheWindowDataInfo: WindowDataInfoType;         var DialogPointer : DialogPtr;         SetGet : boolean);var  i:integer;   begin    for i := 14 to 18 do      setGetDlgInteger(i,TheWindowDataInfo.TypeOfData[i-11], DialogPointer, SetGet);    SetGetDlgRadioCheckRange (TheWindowDataInfo.TypeOfData[1], DialogPointer,SetGet,2,5);    SetGetDlgRadioCheckRange (TheWindowDataInfo.TypeOfData[2], DialogPointer,SetGet,7,12);    setGetDlgInteger(7,TheWindowDataInfo.TypeOfData[9], DialogPointer, SetGet);    SelectText(DialogPointer,14); end;    procedure StackWindowTypeDialog {(var TheWindowDataInfo : WindowDataInfoType)};  var   DialogPointer : DialogPtr;    OldPort:WindowPtr;     begin  GetPort(OldPort);  DialogPointer := GetNewDialog(WindowTypeID, nil, pointer(-1));  StackSetGetwindowtypeDialog(TheWindowDataInfo, dialogPointer, true);  ShowHide(DialogPointer, true);  Modal( OKCancelType, DialogPointer);  if not CancelButton then    begin      if not IgnoreErrorCheck then        OKCancelDialog('Changing a windows type erases any data in the window');      if not cancelButton then        StackSetGetWindowTypeDialog(TheWindowDataInfo, DialogPointer, false);    end;  DisposDialog(DialogPointer);  SetPort(OldPort); end;  procedure StackInit;    var        i:integer;         begin  if InitSPort(SPortA, baud4800, stop10, noParity, data8, 5000, none, none) <> noerr then    sysbeep(10);  for i := 1 to 10 do    DefaultWindowDatainfo.TypeOfData[i]:=0;  DefaultWindowDatainfo.TypeOfData[9]:=1;  DefaultWindowDatainfo.TypeOfData[10]:=0; end; procedure StackClose;      begin    CloseSPort(SportA);   end;    function StackreadByte(Var error:Boolean):Byte;  var    ch:char;    GotChar:Boolean;    count:integer;      begin     GotChar:=False;    Count:=0;    repeat      if InReady(SPortA) then        begin          GetChar(SPortA,ch);          if SerResult<>noErr then  {error on get char}            begin              error:=true;              DebugDialog(SerResult,'error in get char',0);            end          else            GotChar:=True;        end      else        begin          if SerResult<>noErr then  {error on inready}            begin              Error:=true;              debugDialog(SerResult,'Error in inready',0);            end;          SendChar(SportA,' ');          if SerResult<>noErr then  {error on send char}            begin              Error:=true;              debugDialog(SerResult,'Error in send space',0);            end;        end;    until GotChar or (count>1000) or error;    if Count > 1000 then      begin        error:=true;        DebugDialog(0,'Read byte 1000 error',0);      end;    StackReadByte := Ord(ch);  end; procedure StackReadFrame(var Frame:FrameType;                  var IDNumber : byte;                  var eventNumber:integer;                  Var Error:Boolean);   var    Found:Boolean;    WordCount:byte;    Count:integer;    i:integer;      begin    found:=False;    Count:=0;    repeat      begin        count:=Count+1;        if StackreadByte(Error) = 255 then          if StackreadByte(Error) = 255 then            begin              count:=0;              IDNumber:=StackreadByte(Error);              WordCount:=StackreadByte(Error);              EventNumber:=StackreadByte(Error)*256+StackreadByte(Error);              for i:= 1 to (WordCount-1)*2 do                Frame.FrameBuffer[i+(i mod 2)-((i+1) mod 2)]:=StackreadByte(Error);              Found:=False;              case IDNumber of                1:                  ;                2:                  ;                3:                  if Frame.EEFrame.EEID1=Frame.EEFrame.EEID2 then                     Found:=true;              end;            end;      end;    until found or (Count>100) or error;    if Count > 100 then      begin        error:=true;        DebugDialog(0,'Read Frame 100 error',0);      end;  end;    procedure StackReadEvent{(var TheEvent:EventType;        Var Error:boolean)};     var      Frame:FrameType;      IdNumber:byte;      EventNumber:integer;      Count:Integer;      i:integer;          begin      TheEvent.StackEvent.EventNumber:=0;      for i:=0 to 2 do        begin          TheEvent.StackEvent.MWPCFrameFound[i]:=false;        end;      TheEvent.StackEvent.EEFramefound:=false;            TheEvent.StackEvent.EEDecodeSumFound:=False;      for i:=0 to 17 do        TheEvent.StackEvent.EEDecode.EEValuesDecoded[i]:=false;              for i:=0 to 17 do        TheEvent.StackEvent.EErampDecode.EErampValuesDecoded[i]:=false;      Count:=0;            repeat        begin          count:=Count+1;          if LastFrame.Found then            begin              Frame:=LastFrame.Frame;              EventNumber:=LastFrame.eventnumber;              IdNumber:=LastFrame.IdNumber;              TheEvent.StackEvent.EventNumber:=EventNumber;              LastFrame.Found:=False;            end          else            StackReadFrame(Frame,IdNumber,EventNumber,error);          if EventNumber=TheEvent.StackEvent.EventNumber then            begin              case IdNumber of                0..2:                  begin                    TheEvent.StackEvent.MWPCFrame[IdNumber]:=Frame.MWPC;                    TheEvent.StackEvent.MWPCFrameFound[IdNumber]:=true;                  end;                3:                  begin                    TheEvent.StackEvent.EEFrame:=Frame.EEFrame;                    TheEvent.StackEvent.EEFramefound:=true;                  end;              end;            end          else            begin              LastFrame.Found:=True;              LastFrame.Frame:=Frame;              LastFrame.IdNumber:=IdNumber;              LastFrame.EventNumber:=EventNumber;            end;        end;     until LastFrame.found or (Count>100) or error;     if count>100 then      begin        Error:=True;        DebugDialog(0,'Read event 100 error',0);      end;   end;   beginend.