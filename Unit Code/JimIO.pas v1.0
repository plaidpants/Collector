unit JimIO(-8378);{$U-}{$O Jim Surine:Programming:Units:My Units:JimIO}interface  uses    Memtypes,    QuickDraw,    OSIntf,    ToolIntf,    PackIntf,    PasInOut;    type    filerec = file of char;    junktype = array[1..16000] of char;    junkptr = ^junktype;    str63 = string[63];    typetype = packed array[1..4] of char;      var    IOR:integer;      procedure FileIOInit;    procedure SetBufSize(size:longint);    procedure FRewrite(var f:filerec;refnum:integer;name:str63;ftype:typetype;                    fcreator:typetype);    procedure FReset(var f:filerec;refnum:integer;name:str63);  procedure FPutM(var f:filerec;theptr:ptr;size:integer);  procedure FGetM(var f:filerec;theptr:ptr;size:integer);  procedure FClose(var f:filerec);  procedure GetErrorMessage( Error:Integer;var TheError:Str255);  implementation      procedure FileIOInit;    {There is no need for initialization at this stage of the development.}    {This is included only for compatability's sake.}    begin    end;        procedure SetBufSize;    {See above comment.}    begin    end;        procedure GetErrorMessage{( Error:Integer;var TheError:Str255)};    {See above comment.}    begin    end;        procedure FRewrite;    var      err:oserr;      oldvol:integer;      oldnameptr:stringptr;      oldtype,oldcreator:typetype;        begin      oldnameptr:=stringptr(newptr(sizeof(name)));      err:=getvol(oldnameptr,oldvol);      err:=setvol(nil,refnum);      oldtype:=FileType;      oldcreator:=FileCreator;      FileType:=ftype;      FileCreator:=fcreator;      rewrite(f,name);      FileType:=oldtype;      FileCreator:=oldcreator;      err:=setvol(oldnameptr,oldvol);    end;      procedure FReset;    var      err:oserr;      oldvol:integer;      oldnameptr:stringptr;         begin       oldnameptr:=stringptr(newptr(sizeof(name)));      err:=getvol(oldnameptr,oldvol);      err:=setvol(nil,refnum);      reset(f,name);      err:=setvol(oldnameptr,oldvol);    end;  procedure FPutM;    var      i:integer;      stuff:junkptr;          begin    stuff:=pointer(theptr);    for i:=1 to size do      write(f,stuff^[i]);    end;      procedure FGetM;    var      i:integer;      stuff:junkptr;          begin    stuff:=pointer(theptr);    for i:= 1 to size do      read(f,stuff^[i]);    end;      Procedure FClose;      begin      Close(F);    end;    begin    IOR:=0;end.