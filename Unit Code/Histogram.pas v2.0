unit Histogram(-70);interface {$U-} {Use My own include Librarys} {$R DialogRsrc} {Load my reasources (dialog boxes etc..)} {$U Jim Surine:Programming:Units:My Units:Dialogs} {$U Jim Surine:Programming:Units:My Units:Patterns} {$U Jim Surine:Programming:Units:My Units:Axis2} {$I-} {$O Jim Surine:Programming:Units:My Units:Histogram}uses Memtypes,            {Basic types stanadard} QuickDraw,           {Quickdraw standard} OSIntf,              {Operating system standard} ToolIntf,            {Tools standard} PackIntf,            {Package stuff (List Manager, Decimal to string convert)} sane,                {For Real number conversions}  PasInOut,  Dialogs, Patterns, Axis2;  const  HistogramDisplayID = 28991;{Histogram Display parameters editing dialog}  HistogramDataID = 2262; {Histogram Data parameters editing dialog}  HistogramInfoID = 4871;  HistogramLimit = 5000;type   HistogramInfoType = record    LowerDataBound : real;    UpperDataBound : Real;        NumberOfDataBins : integer;        AxisInfo:AxisInfoType;    NumberOfDisplayBins : integer;        AutoScale:Integer;    Tracking:integer;    TrackingAutoScale:integer;        Title:Str255;    note:Str255;    DrawOption:integer;   end;  HistogramType = record    HistogramData : packed array[1..HistoGramLimit] of Integer;    NumberinHist : integer;    NumberOutsideHist:integer;    MaxNumberInBin : integer;    HistogramInfo : HistogramInfoType;   end;HistogramAnalType=record      Number : integer;      TotalNumber:integer;      Percent:real;      Mean : real;      StandardDev: real;      PeakLocation:real;      PeakValue:integer;  end;   procedure InitHistogram (var Histogram : HistogramType;        ThePort:WindowPtr);          procedure CloseHistogram (var Histogram : HistogramType);          procedure AddToHistogram (var Histogram : HistogramType;         Number : real;         Add : integer;         ThePort:WindowPtr);          procedure DrawHistogram (var TheHistogram : HistogramType;                          ThePort:WindowPtr);  Procedure SaveHistogramAsText (var TheHistogram : HistogramType;          Reply:SFReply;          var OutPut:Text); Procedure LoadHistogramAsText (var TheHistogram : HistogramType;          Reply:SFReply;          var Input:Text);   procedure HistogramDisplayDialog (var Histogram: HistogramType;                    ThePort:WindowPtr);  procedure HistogramDataDialog (var Histogram : HistogramType;                    ThePort:WindowPtr);  procedure HistogramAnal(var TheHistogramAnal:HistogramAnalType;            var Histogram : HistogramType); procedure HistogramInfoDialog (var Histogram : HistogramType);implementation{********************Histogram Procedures*********************}Procedure SaveHistogramAsText {(var TheHistogram : HistogramType;          Reply:SFReply;          var OutPut:Text)};  var     i:integer;    		begin			with TheHistogram do				begin					writeln(Output,HistogramInfo.LowerDataBound:9:9);     writeln(Output,HistogramInfo.UpperDataBound:9:9);     writeln(Output,HistogramInfo.NumberOfDataBins);     writeln(Output,HistogramInfo.Title);     writeln(Output,HistogramInfo.Note);     writeln(Output,HistogramInfo.NumberOfDisplayBins);          writeln(Output,HistogramInfo.LowerVerticleBound);     writeln(Output,HistogramInfo.UpperVerticleBound);          writeln(Output,HistogramInfo.DrawOption);     writeln(Output,NumberinHist);     writeln(Output,NumberOutsideHist);     writeln(Output,MaxNumberInBin);          for i:= 1 to HistogramInfo.NumberOfDataBins do       writeln(OutPut,HistogramData[i]);				end;		end;Procedure LoadHistogramAsText {(var TheHistogram : HistogramType;          Reply:SFReply;          var Input:Text)};  var     i:integer;    Dummy:Str255;    		begin			with TheHistogram do				begin					readln(Input,HistogramInfo.LowerDataBound);     readln(Input,HistogramInfo.UpperDataBound);          readln(Input,HistogramInfo.NumberOfDataBins);     readln(Input,HistogramInfo.Title);     readln(Input,HistogramInfo.note);         readln(Input,HistogramInfo.LowerDisplayBound);     readln(Input,HistogramInfo.UpperDisplayBound);     readln(Input,HistogramInfo.NumberOfDisplayBins);          readln(Input,HistogramInfo.LowerVerticleBound);     readln(Input,HistogramInfo.UpperVerticleBound);          readln(Input,HistogramInfo.DrawOption);     readln(Input,NumberinHist);     readln(Input,NumberOutsideHist);     readln(Input,MaxNumberInBin);          for i:= 1 to HistogramInfo.NumberOfDataBins do       readln(Input,HistogramData[i]);				end;		end;procedure CheckHistogram( var Histogram : HistogramType);  var    TempReal:Real;    begin  CheckAxisInfo(HistogramInfo.AxisInfo);  if Histogram.HistogramInfo.LowerDataBound>HistogramInfo.UpperDataBound then    begin        TempReal:=Histogram.HistogramInfo.LowerDataBound;        Histogram.HistogramInfo.LowerDataBound:=Histogram.HistogramInfo.UpperDataBound;        Histogram.HistogramInfo.UpperDataBound:=TempReal;    end; end;  procedure InitHistogram {(var Histogram : HistogramType;         ThePort:WindowPtr;)};           var    i:integer;     begin  CheckHistogramInfo(Histogram);  for i := 1 to HistogramInfo.NumberofDataBins do    Histogram.HistogramData[i] := 0;  Histogram.NumberInHist := 0;  Histogram.NumberOutsideHist:=0;  Histogram.MaxNumberInBin := 0; end; procedure CloseHistogram {(var Histogram : HistogramType)}; begin end; procedure AddToHistogram {(var Histogram : HistogramType;         Number : real;         Add : integer;         ThePort:WindowPtr)};  var   Loc : integer;    begin    if (Number<Histogram.Histograminfo.upperDataBound) and (Number=>Histogram.Histograminfo.LowerdataBound) then    begin      with Histogram.HistogramInfo do        Loc := Trunc((Number - LowerdataBound) / ((UpperdataBound - LowerdataBound) / NumberOfDataBins)) + 1;           {Plus One because array starts at one}           Histogram.HistogramData[Loc] := Histogram.HistogramData[Loc] + Add;      Histogram.NumberInHist := Histogram.NumberInHist + Add;      if Histogram.HistogramData[loc] > Histogram.MaxNumberInBin then        Histogram.MaxNumberInBin := Histogram.HistogramData[loc];    end  else    Histogram.NumberOutsideHist := Histogram.NumberOutsideHist + Add; end;  procedure DrawHistogram {(var TheHistogram : HistogramType;            ThePort:WindowPtr)};  var   AxisInfo:AxisInfoType;      DisplayDataRange:Real;   DataRange:Real;   BinSpace:Real;      StartBin:Real;   BinStep:Real;   TheBin:integer;      TheRealPoint:RealPoint;   ThePoint:Point;   InView:boolean;       TitleLoc:integer;    theEvent:EventRecord;    OldPort:WindowPtr;     begin    GetPort(OldPort);    SetPort(ThePort);    DefaultAxis(AxisInfo,ThePort);        with AxisInfo do        begin            XGridMinor:=0;            YGridMinor:=0;            XGridMajor:=23;            YGridMajor:=20;            if (TheHistogram.HistoGramInfo.LowerverticleBound=TheHistogram.HistoGramInfo.UpperverticleBound) then                begin                    DataRect.top:=TheHistogram.MaxNumberInBin+1;                    DataRect.Bottom:=0;                end            else                begin                    DataRect.top:=TheHistogram.HistoGramInfo.UpperverticleBound;                    DataRect.Bottom:=TheHistogram.HistoGramInfo.LowerverticleBound;                end;                            DataRect.Left:=TheHistogram.HistoGramInfo.LowerDisplayBound;            DataRect.right:=TheHistogram.HistoGramInfo.UpperDisplayBound;                        TitleLoc:=pos('*',TheHistogram.HistoGramInfo.Title);            Title:=copy(TheHistogram.HistoGramInfo.Title,1,TitleLoc-1);            Note:=copy(TheHistogram.HistoGramInfo.Title,TitleLoc+1,Length(TheHistogram.HistoGramInfo.Title)-TitleLoc);                    end;     AdjustAxis(AxisInfo,ThePort);     DrawAxis(AxisInfo,ThePort);          DisplayDataRange:=AxisInfo.DataRect.Right-AxisInfo.DataRect.Left;     DataRange:=TheHistogram.HistoGramInfo.UpperDataBound-TheHistogram.HistoGramInfo.LowerDataBound;        BinStep:=(TheHistogram.HistoGramInfo.NumberOfDataBins/DataRange)        *(DisplayDataRange/TheHistogram.HistoGramInfo.NumberOfDisplayBins);          BinSpace:=(DisplayDataRange/TheHistogram.HistoGramInfo.NumberOfDisplayBins);      StartBin:=binstep*(Axisinfo.DataRect.left-TheHistogram.HistogramInfo.LowerDataBound)/BinSpace;     penPat(MyPatterns[16]);     PenSize(1,1);          TheRealPoint.X:=AxisInfo.DataRect.Left;     TheRealPoint.y:=0;     WhereAxis(AxisInfo,TheRealPoint,ThePoint,InView);     MoveTo(ThePoint.h,ThePoint.v);     for i:= 0 to trunc(TheHistogram.HistogramInfo.NumberOfDisplayBins)-1 do        begin            If eventAvail(keydownmask,theEvent) then                Exit;            TheBin:=trunc(StartBin+i*BinStep);            if (TheBin>=0) and (TheBin<TheHistogram.HistogramInfo.NumberOfDataBins) then                TheRealPoint.y:=TheHistogram.HistogramData[TheBin+1]            else                TheRealPoint.y:=0;            TheRealPoint.X:=AxisInfo.DataRect.Left+BinSpace*i;            WhereAxis(AxisInfo,TheRealPoint,ThePoint,InView);            LineTo(ThePoint.h,ThePoint.v);            TheRealPoint.X:=AxisInfo.DataRect.Left+BinSpace*(i+1);            WhereAxis(AxisInfo,TheRealPoint,ThePoint,InView);            LineTo(ThePoint.h,ThePoint.v);        end;     TheRealPoint.X:=AxisInfo.DataRect.Right;     TheRealPoint.y:=0;     WhereAxis(AxisInfo,TheRealPoint,ThePoint,InView);     LineTo(ThePoint.h,ThePoint.v);          SetPort(OldPort); end; procedure SetGetHistogramDisplayDialog (var Histogram : HistogramType;         var DialogPointer : DialogPtr;         SetGet : boolean); begin  with Histogram.Histograminfo do   begin    setGetDlgReal(3, LowerDisplayBound, DialogPointer, SetGet);    setGetDlgReal(4, UpperDisplayBound, DialogPointer, SetGet);    setGetDlginteger(5, LowerVerticleBound, DialogPointer, SetGet);    setGetDlginteger(6, UpperVerticleBound, DialogPointer, SetGet);    setGetDlginteger(7, NumberOfDisplayBins, DialogPointer, SetGet);    SetGetDlgBoolean(8, LowerDisplayInclude, DialogPointer, SetGet);    SetGetDlgBoolean(9, UpperDisplayInclude, DialogPointer, SetGet);    SetgetDlgStr255(10, Title, DialogPointer, SetGet);    SelectText(DialogPointer,3);   end; end; procedure HistogramDisplayDialog {(var Histogram : HistogramType)};  var   DialogPointer : DialogPtr;    OldPort:WindowPtr;     begin  GetPort(OldPort);  DialogPointer := GetNewDialog(HistogramDisplayID, nil, pointer(-1));  SetGetHistogramDisplayDialog(Histogram, dialogPointer, true);  ShowHide(DialogPointer, true);  Modal( OKCancelType, DialogPointer);  if not cancelButton then   SetGetHistogramDisplayDialog(Histogram, DialogPointer, false);  DisposDialog(DialogPointer);  CheckHistogram(Histogram);  SetPort(OldPort); end; procedure SetGetHistogramDataDialog (var Histogram: HistogramType;         var DialogPointer : DialogPtr;         SetGet : boolean); begin  with Histogram.Histograminfo do   begin    setGetDlgReal(3, LowerDataBound, DialogPointer, SetGet);    setGetDlgReal(4, UpperDataBound, DialogPointer, SetGet);    setGetDlginteger(5, NumberOfDataBins, DialogPointer, SetGet);    SetGetDlgBoolean(6, LowerDisplayInclude, DialogPointer, SetGet);    SetGetDlgBoolean(7, UpperDisplayInclude, DialogPointer, SetGet);    SelectText(DialogPointer,3);   end; end; procedure HistogramDataDialog { (var Histogram : HistogramType;                    ThePOrt:WindowPtr)};  var   DialogPointer : DialogPtr;  OldPort:WindowPtr;   begin  GetPort(OldPort);  DialogPointer := GetNewDialog(HistogramDataID, nil, pointer(-1));  SetGetHistogramDataDialog(Histogram, dialogPointer, true);  ShowHide(DialogPointer, true);  Modal( OKCancelType, DialogPointer);  if not CancelButton then    begin      OKCancelDialog('Changing a histograms data ranges erases the histogram');      if not CancelButton then        begin          SetGetHistogramDataDialog(Histogram, DialogPointer, false);          InitHistogram(Histogram,ThePort);        end;    end;  DisposDialog(DialogPointer);  CheckHistogram(Histogram);  SetPort(OldPort); end;   procedure HistogramAnal{(var TheHistogramAnal:HistogramAnalType;            var Histogram : HistogramType)};   var    i,j:integer;    TheValue:integer;    sum:real;    n:integer;    mean:real;    standard:real;    XPlus:Real;    XNumber:real;    PeakLoc:Real;    Percent:Real;    XLoc:integer;      begin    with Histogram.Histograminfo do      begin       XPlus:=((upperDisplaybound-LowerDisplayBound)/NumberOfDisplayBins)         /((upperDatabound-LowerDataBound)/NumberOfDataBins);       XNumber:=(LowerDisplayBound-LowerDataBound)/((upperDatabound - LowerDataBound)/NumberOfDataBins);      end;          n:=0;    sum:=0;    with Histogram.Histograminfo do      for i := 1 to Histogram.HistogramInfo.NumberofDisplayBins do        begin          Xloc:=trunc(Xnumber+XPlus*(i-1))+1;          n:=n+Histogram.HistogramData[Xloc];          sum:=sum+Histogram.HistogramData[Xloc]*(Xloc*((upperdatabound-LowerDataBound)/NumberofDatabins)+LowerDataBound);        end;    mean:=sum/n;        sum:=0;    with Histogram.Histograminfo do      for i := 1 to Histogram.HistogramInfo.NumberofDisplayBins do        begin          Xloc:=trunc(Xnumber+XPlus*(i-1))+1;          sum:=sum+Histogram.HistogramData[Xloc]*            ((Xloc*((upperdatabound-LowerDataBound)/NumberofDatabins)+LowerDataBound)-mean)*            ((Xloc*((upperdatabound-LowerDataBound)/NumberofDatabins)+LowerDataBound)-mean);        end;    standard:=sqrt(sum/(n-1.0));        with Histogram.Histograminfo do      for i:=1 to Histogram.Histograminfo.NumberOfDataBins do        if Histogram.HistogramData[i]=Histogram.MaxNumberInBin then          Peakloc:=(i*((upperdatabound-LowerDataBound)/NumberofDatabins)+LowerDataBound);        percent:= n/(Histogram.NumberInHist+Histogram.NumberOutSideHist)*100;        TheHistogramAnal.Mean:=Mean;    TheHistogramAnal.standardDev:=Standard;    TheHistogramAnal.PeakLocation:=Peakloc;    TheHistogramAnal.PeakValue:=Histogram.MaxNumberInBin;    TheHistogramAnal.number:=n;    TheHistogramAnal.Totalnumber:=Histogram.NumberInHist+Histogram.NumberOutSideHist;    TheHistogramAnal.Percent:=percent;  end;  procedure SetGetHistogramInfoDialog (var Histogram : HistogramType;         var DialogPointer : DialogPtr;         SetGet : boolean);   var    TheHistogramAnal:HistogramAnalType;     begin    HistogramAnal(TheHistogramAnal,Histogram);        setGetDlgReal(2, TheHistogramAnal.Mean, DialogPointer, SetGet);    setGetDlgReal(3, TheHistogramAnal.standardDev, DialogPointer, SetGet);    setGetDlgReal(4, TheHistogramAnal.PeakLocation, DialogPointer, SetGet);    setGetDlgInteger(5, TheHistogramAnal.PeakValue, DialogPointer, SetGet);    setGetDlgInteger(6, TheHistogramAnal.number, DialogPointer, SetGet);    setGetDlgInteger(7, TheHistogramAnal.Totalnumber, DialogPointer, SetGet);    setGetDlgReal(9, TheHistogramAnal.Percent, DialogPointer, SetGet);    setGetDlgInteger(8, Histogram.NumberOutSideHist, DialogPointer, SetGet); end; procedure HistogramInfoDialog { (var Histogram : HistogramType)};  var   DialogPointer : DialogPtr;    OldPort:WindowPtr; begin  GetPort(OldPort);  DialogPointer := GetNewDialog(HistograminfoID, nil, pointer(-1));  SetGetHistograminfoDialog(Histogram, dialogPointer, true);  ShowHide(DialogPointer, true);  Modal( OKType, DialogPointer);  DisposDialog(DialogPointer);  SetPort(OldPort); end; begin end.