unit TDC(-56);interface {$U-} {Use My own include Librarys} {$U Jim Surine:Programming:Units:My Units:Dialogs} {$U Jim Surine:Programming:Units:My Units:Patterns} {$U Jim Surine:Programming:Units:My Units:Axis2} {$U Jim Surine:Programming:Units:Mews Units:Serial} {$U Jim Surine:Programming:Units:My Units:Histogram} {$U Jim Surine:Programming:Units:My Units:GrayScale} {$U Jim Surine:Programming:Units:My Units:RecordInteger} {$U Jim Surine:Programming:Units:My Units:RecordReal} {$U Jim Surine:Programming:Units:My Units:RecordLongInt} {$U Jim Surine:Programming:Units:My Units:Plot} {$U Jim Surine:Programming:Units:My Units:AutoRecord} {$U Jim Surine:Programming:Units:My Units:CollectorGlobals} {$I-} {$O Jim Surine:Programming:Units:My Units:TDC} uses Memtypes,            {Basic types stanadard} QuickDraw,           {Quickdraw standard} OSIntf,              {Operating system standard} ToolIntf,            {Tools standard}  PackIntf,            {Package stuff (List Manager, Decimal to string convert)} sane,                {For Real number conversions}   PasInOut,  Dialogs, Serial, Patterns, Axis2, Histogram, GrayScale, RecordInteger, RecordReal, RecordLongInt, Plot, AutoRecord,  CollectorGlobals;  const  WIndowNewTypeID = 27927;  PortBufferID = 13885;    BufferDefault = 100;    type    LookUpTableHandle=^LookUpTablePointer;    LookUpTablePointer=^LookUpTableType;    LookUpTableType=array [0..1024,0..5] of integer;                     Var    TheLookUpTableHandle:LookUpTableHandle;    TDCOffset:integer;Procedure TDCAddToWindow(var TheWindowData:WindowDataType;                    TheEvent:EventType;                  ThePort:WindowPtr);                    procedure TDCinitHistograminfo(var TheWindowData:WindowDataType;                  ThePort:WindowPtr);procedure TDCInitGrayScaleinfo(var TheWindowData:WindowDataType;                  ThePort:WindowPtr);procedure TDCInitRecordIntegerinfo(var TheWindowData:WindowDataType;                  ThePort:WindowPtr);                  procedure TDCInitRecordRealinfo(var TheWindowData:WindowDataType;                  ThePort:WindowPtr);procedure TDCInitAutoRecordinfo(var TheWindowData:WindowDataType;                  ThePort:WindowPtr);procedure TDCWindowTypeDialog (var TheWindowDatainfo : WindowDatainfoType);procedure TDCInit; Procedure TDCClose;procedure TDCReadEvent(var TheEvent:EventType;     var Error:Boolean);implementation{*************init windowDataWindowData procedures **************} procedure TDCinitHistograminfo{(var TheWindowData:WindowDataType;                  ThePort:WindowPtr)}; {inits the histogram info record according to typeofdata[2] (0-MWPC 1-EE) and typeofdata[3] (# of MWPC or EE)}  var   TheString:str255;   seconds:longInt;    begin  with TheWindowData.windowdata.Histogram.HistogramInfo do   begin    case TheWindowData.WindowDataInfo.TypeOfData[3] of     0:      begin        LowerDataBound := 0;        UpperDataBound := 1024;        NumberOfDataBins := 1024;                UpperdataInclude := true;        LowerdataInclude := true;                GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 1024;        NumberOfDisplayBins := 100;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;  {Default scaling}        UpperVerticleBound:=0;      end;    1:      begin        LowerDataBound := 0;        UpperDataBound := 64;        NumberOfDataBins := 64;                UpperdataInclude := true;        LowerdataInclude := true;                  GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 64;        NumberOfDisplayBins := 64;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;    Otherwise      begin        LowerDataBound := 0;        UpperDataBound := 64;        NumberOfDataBins := 64;                UpperdataInclude := true;        LowerdataInclude := true;                  Title:='Default histogram plot';        GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;                LowerDisplayBound := 0;        UpperDisplayBound := 64;        NumberOfDisplayBins := 64;                UpperDisplayInclude := true;        LowerDisplayInclude := true;                LowerVerticleBound:=0;    {Default scaling}        UpperVerticleBound:=0;      end;     end;         case TheWindowData.WindowDataInfo.TypeOfData[2] of      0:      begin        case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Data A, Device#'+TheString+' histogram plot';            end;          1:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Data B, Device#'+TheString+' histogram plot';            end;          2:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='ADC Data, Device#'+TheString+' histogram plot';            end;           otherwise            Title:='Default histogram plot';        end;      end;     1:      begin        LowerDisplayBound:=-UpperDisplayBound;        NumberOfDisplayBins:=2*NumberOfDisplayBins;        LowerDataBound:=-UpperDisplayBound;        NumberOfDataBins:=2*NumberOfDisplayBins;                case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Data A, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' histogram plot';            end;          1:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Data B, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' histogram plot';            end;          2:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='ADC Data, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' histogram plot';            end;          otherwise            Title:='Default histogram plot';        end;      end;     2:        case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='TDC Look up Data A, Device#'+TheString+' Histogram';            end;          1:             begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='TDC Look up Data B, Device#'+TheString+' Histogram';            end;          2:             begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='ADC Look up Data, Device#'+TheString+' Histogram';            end;          otherwise          Title:='Default histogram plot';        end;      3:        case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Look up Data A, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' Histogram';            end;          1:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Look up Data B, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' Histogram';            end;          2:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='ADC Look up Data, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' Histogram';            end;          otherwise          Title:='Default histogram plot';          end;        otherwise        Title:='Default histogram plot';      end;        GetDateTime(Seconds);        IUDateString(Seconds,shortDate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;      end;   end; procedure TDCinitGrayScaleinfo{(var TheWindowData:WindowDataType;                  ThePort:WindowPtr)};  var  TheString:Str255;  Seconds:Longint;   begin  with TheWindowData.windowdata.GrayScale.GrayScaleInfo do   begin       DataRangeDomain.top:=1000;       DataRangeDomain.bottom:=0;       DataRangeDomain.right:=1000;       DataRangeDomain.left:=0;              TopDataInclude:=true;       BottomDataInclude:=true;       LeftDataInclude:=true;       RightDataInclude:=true;              HorzDataBins:=50;       VertDataBins:=50;              DisplayRangeDomain.top:=1000;       DisplayRangeDomain.bottom:=0;       DisplayRangeDomain.right:=1000;       DisplayRangeDomain.left:=0;              TopDisplayInclude:=true;       BottomDisplayInclude:=true;       LeftDisplayInclude:=true;       RightDisplayInclude:=true;       HorzDisplayBins:=10;       VertDisplayBins:=10;       LowerVerticleBound:=0; {Default grayscale scaling}       UpperVerticleBound:=0;              Title:='Default Gray Scale Plot';       GetDateTime(Seconds);       IUDateString(Seconds,shortdate,TheString);       Title:=Title+' created '+TheString;       IUTimeString(Seconds,false,TheString);       Title:=Title+' '+TheString;     end;   end;   procedure TDCInitRecordIntegerinfo{(var TheWindowData:WindowDataType;                  ThePort:WindowPtr)}; var  TheString:Str255;  Seconds:Longint;  begin    with TheWindowData.windowdata.RecordInteger.RecordIntegerInfo do      begin        NumberPerRecord:=3;        NumberToRecord := 1000;                Title:='Record integer Data A Device 0 and 1, Data B Device 0 minus 1';                GetDateTime(Seconds);        IUDateString(Seconds,shortdate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;        DrawOption:=0;      end;  end;procedure TDCInitRecordRealinfo{(var TheWindowData:WindowDataType;                  ThePort:WindowPtr)}; var  TheString:Str255;  Seconds:Longint;  begin    with TheWindowData.windowdata.RecordReal.RecordRealInfo do      begin        NumberPerRecord:=3;        NumberToRecord := 1000;                Title:='Record integer Data A Device 0 and 1, Data B Device 0 minus 1';        GetDateTime(Seconds);        IUDateString(Seconds,shortdate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;        DrawOption:=0;      end;  end;  procedure TDCInitAutoRecordinfo{(var TheWindowData:WindowDataType;                  ThePort:WindowPtr)}; var  TheString:Str255;  Seconds:Longint;  begin    with TheWindowData.windowdata.AutoRecord.AutoRecordInfo do      begin        NumberOfDelay :=1000;        StartDelay := 0;        StepDelay := 50;        NumberPerDelay:=100;            case TheWindowData.WindowDataInfo.TypeOfData[2] of        0:        case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='TDC Data A, Device#'+TheString+' auto record';            end;          1:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='TDC Data B, Device#'+TheString+' auto record';            end;          2:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='ADC Data, Device#'+TheString+' auto record';            end;          otherwise            Title:='Default auto record';        end;        1:        case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Data A, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' auto record';            end;          1:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Data B, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' auto record';            end;          2:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='ADC Data, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' auto record';            end;            otherwise            Title:='Default auto record';         end;      2:        case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='TDC Look up Data A, Device#'+TheString+' auto record';            end;          1:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='TDC Look up Data B, Device#'+TheString+' auto record';            end;          2:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheString);              Title:='ADC Look up Data, Device#'+TheString+' auto record';            end;          otherwise            Title:='Default auto record';        end;      3:        case TheWindowData.WindowDataInfo.TypeOfData[3] of          0:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Look up Data A, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' auto record';            end;           1:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='TDC Look up Data B, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' auto record';            end;           2:            begin              NumToString(TheWindowData.WindowDataInfo.TypeOfData[4],TheSTring);              Title:='ADC Look up Data, Device#'+TheString;              NumToString(TheWindowData.WindowDataInfo.TypeOfData[5],TheSTring);              Title:=Title+' - Device#'+TheString+' auto record';            end;          otherwise            Title:='Default auto record';          end;         otherwise            Title:='Default auto record';      end;                GetDateTime(Seconds);        IUDateString(Seconds,shortdate,TheString);        Title:=Title+' created '+TheString;        IUTimeString(Seconds,false,TheString);        Title:=Title+' '+TheString;        DrawOption:=0;      end;  end;  {***************** add to window procedure ********************}Procedure TDCAddToWindow{(var TheWindowData:WindowDataType;                    TheEvent:EventType;                    ThePort:WindowPtr)};  var    Numbers:RecordIntegerDataType;    Number:RecordRealDataType;    TheNumber:real;    TheNumberX,TheNUmberY:Real;    error:Boolean;    begin      HLock(Handle(TheLookupTableHandle));      case TheWindowData.WindowDataInfo.TypeOfData[1] of        0:          case TheWindowData.WindowDataInfo.TypeOfData[2] of            0:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  AddToHistogram(TheWindowData.WindowData.Histogram,                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA,1,ThePort);                1:                  AddToHistogram(TheWindowData.WindowData.Histogram,                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB,1,ThePort);                2:                  AddToHistogram(TheWindowData.WindowData.Histogram,                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].ADCEvent,1,ThePort);              end;            1:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  begin                    AddToHistogram(TheWindowData.WindowData.Histogram,                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataA,1,ThePort);                  end;                1:                  Begin                    AddToHistogram(TheWindowData.WindowData.Histogram,                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataB,1,ThePort);                  end;                2:                  Begin                    AddToHistogram(TheWindowData.WindowData.Histogram,                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].ADCEvent-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].ADCEvent,1,ThePort);                  end;              end;            2:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  begin                    TheNumber:=TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[4]];                    AddToHistogram(TheWindowData.WindowData.Histogram,TheNumber,1,ThePort);                  end;              end;            3:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  begin                    TheNumber:=-(TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[4]]                      -TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[5]])                      +(((TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB-                      TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataB+32+64) MOD 64)-32)*TDCOffset;                    AddToHistogram(TheWindowData.WindowData.Histogram,TheNumber,1,ThePort);                  end;              end;          end;              1:          case TheWindowData.WindowDataInfo.TypeOfData[2] of            0:              begin               case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA;                1:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB;                2:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].ADCEvent;               end;               case TheWindowData.WindowDataInfo.TypeOfData[6] of                0:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataA;                1:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataB;                2:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].ADCEvent;                end;               AddToGrayScale(TheWindowData.WindowData.GrayScale,TheNumberX,TheNumberY,1,ThePort);              end;            1:              begin               case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataA;                1:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataB;                2:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].ADCEvent-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].ADCEvent;               end;               case TheWindowData.WindowDataInfo.TypeOfData[6] of                0:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataA-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[8]].DataA;                1:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataB-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[8]].DataB;                2:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].ADCEvent-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[8]].ADCEvent;                end;               AddToGrayScale(TheWindowData.WindowData.GrayScale,TheNumberX,TheNumberY,1,ThePort);              end;            2:              begin               case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:TheNumberX:=TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[4]];                1:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB;                2:TheNumberX:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].ADCEvent;               end;               case TheWindowData.WindowDataInfo.TypeOfData[6] of                0:TheNumberY:=TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[7]];                1:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataB;                2:TheNumberY:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].ADCEvent;                end;               AddToGrayScale(TheWindowData.WindowData.GrayScale,TheNumberX,TheNumberY,1,ThePort);              end;            3:             begin               case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:TheNumberX:=-(TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[4]]                      -TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[5]])                      +(((TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB-                      TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataB+32+64) MOD 64)-32)*TDCOffset;               end;               case TheWindowData.WindowDataInfo.TypeOfData[6] of                0:TheNumberY:=-(TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[7]]                      -TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[8]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[8]])                      +(((TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[7]].DataB-                      TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[8]].DataB+32+64) MOD 64)-32)*TDCOffset;                end;               AddToGrayScale(TheWindowData.WindowData.GrayScale,TheNumberX,TheNumberY,1,ThePort);              end;          end;        2:          begin            Numbers[1]:=TheEvent.TDCEvent[0].DataA;            Numbers[2]:=TheEvent.TDCEvent[1].DataA;            Numbers[3]:=TheEvent.TDCEvent[0].DataB-TheEvent.TDCEvent[1].DataB;            AddToRecordInteger(TheWindowData.WindowData.RecordInteger,Numbers,ThePort,error);          end;        3:          begin            Number[1]:=TheEvent.TDCEvent[0].DataA;            Number[2]:=TheEvent.TDCEvent[1].DataA;            Number[3]:=TheEvent.TDCEvent[0].DataB-TheEvent.TDCEvent[1].DataB;            AddToRecordReal(TheWindowData.WindowData.RecordReal,Number,ThePort,error);          end;        4:          case TheWindowData.WindowDataInfo.TypeOfData[2] of            0:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  begin                    TheNumber:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA;                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                  end;                1:                  begin                    TheNumber:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB;                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                  end;                2:                  begin                    TheNumber:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].ADCEvent;                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                  end;              end;            1:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  begin                    TheNumber:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataA;                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                  end;                1:                  Begin                    Numbers[1]:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataB;                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                  end;                2:                  Begin                    TheNumber:=TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].ADCEvent-                    TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].ADCEvent;                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                  end;              end;            2:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  begin                    TheNumber:=TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[4]];                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                  end;              end;            3:              case TheWindowData.WindowDataInfo.TypeOfData[3] of                0:                  begin                    TheNumber:=-(TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[4]]                      -TheLookUpTableHandle^^[TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataA,                      TheWindowData.WindowDataInfo.TypeOfData[5]])                      +(((TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[4]].DataB-                      TheEvent.TDCEvent[TheWindowData.WindowDataInfo.TypeOfData[5]].DataB+32+64) MOD 64)-32)*TDCOffset;                    AddToAutoRecord(TheWindowData.WindowData.AutoRecord,TheNumber,ThePort);                   end;                  end;              end;      end;   HunLock(Handle(TheLookUpTableHandle));  end;       procedure TDCSetGetWindowTypeDialog (var   TheWindowDataInfo: WindowDataInfoType;         var DialogPointer : DialogPtr;         SetGet : boolean);var  i:integer;   begin    SetGetDlgRadioCheckRange (TheWindowDataInfo.TypeOfData[1], DialogPointer,SetGet,3,9);    SetGetDlgRadioCheckRange (TheWindowDataInfo.TypeOfData[2], DialogPointer,SetGet,10,13);    SetGetDlgRadioCheckRange (TheWindowDataInfo.TypeOfData[3], DialogPointer,SetGet,16,18);    setGetDlgInteger(14,TheWindowDataInfo.TypeOfData[4], DialogPointer, SetGet);    setGetDlgInteger(15,TheWindowDataInfo.TypeOfData[5], DialogPointer, SetGet);    SetGetDlgRadioCheckRange (TheWindowDataInfo.TypeOfData[6], DialogPointer,SetGet,21,23);    setGetDlgInteger(19,TheWindowDataInfo.TypeOfData[7], DialogPointer, SetGet);    setGetDlgInteger(20,TheWindowDataInfo.TypeOfData[8], DialogPointer, SetGet);    SelectText(DialogPointer,14); end;    procedure TDCWindowTypeDialog {(var TheWindowinfoData : WindowDatainfoType)};  var   DialogPointer : DialogPtr;  OldPort:WindowPtr;   begin  GetPort(OldPort);  DialogPointer := GetNewDialog(WindowNewTypeID, nil, pointer(-1));  TDCSetGetwindowtypeDialog(TheWindowDataInfo, dialogPointer, true);  ShowHide(DialogPointer, true);  Modal( OKCancelType, DialogPointer);  if not CancelButton then    begin      if not IgnoreErrorCheck then        OKCancelDialog('Changing a windows type erases any data in the window');      if not cancelButton then        TDCSetGetWindowTypeDialog(TheWindowDataInfo, DialogPointer, false);    end;  DisposDialog(DialogPointer);  SetPort(oldPort); end;  procedure GetTextReadFile (var reply : SFReply);     var      pt : point;      FileTypeArray : SFTypeList;     begin    pt.h := 50;    pt.v := 50;      FileTypeArray[0] := 'TEXT';    SFGetFile(pt, 'File to Open', nil, 1, FileTypeArray, nil, reply);    CancelButton := not Reply.Good;  end; procedure TDCInit;  var   DialogPointer : DialogPtr;   BufferSize : LongInt;  i:integer;  Reply:SFReply;  TheFile:Text;  Number1,Number2,Number3:LongInt;    DummyString:StringPtr;  OldVol:integer;ResultError:integer; begin  BufferSize:=BufferDefault;    DialogPointer := GetNewDialog(PortBufferID, nil, pointer(-1));  SetGetDlgLongInt(2,BufferSize, dialogPointer, true);  SelectText(DialogPointer,2);  ShowHide(DialogPointer, true);  Modal( OKType, DialogPointer);  SetGetDlgLongInt(2,BufferSize, dialogPointer, False);  DisposDialog(DialogPointer);    if InitSPort(SPortA, baud9600, stop20, noParity, data8, BufferSize, XonXoff, none) <> noerr then    sysbeep(10);    for i := 1 to 10 do    DefaultWindowDatainfo.TypeOfData[i]:=0;  IgnoreErrorCheck:=False;    DefaultWindowDatainfo.TypeOfData[5]:=1;  DefaultWindowDatainfo.TypeOfData[10]:=2;        Reply.Fname:='TDC Table';  GetTextReadFile(Reply);     DummyString:=Nil;   ResultError:=GetVol(DummyString,OldVol);   DummyString:=Nil;   ResultError:=SetVol(DummyString,Reply.vRefNum);  Reset(TheFile,Reply.Fname);  ReadLn(TheFile,TDCOffset);  TheLookUpTableHandle:=LookUpTableHandle(NewHandle(SizeOf(LookUpTableType)));  HLock(Handle(TheLookUpTableHandle));  while not eof(TheFile) do    begin      Read(TheFile,Number1);      i:=0;      while not eoln(TheFile) do        begin          Read(TheFile,Number2);          TheLookUpTableHandle^^[Number1,i]:=LongInt(Number2);          i:=i+1;        end;      Readln(TheFile);    end;  HUnlock(Handle(TheLookUpTableHandle));      Close(TheFile);  DummyString:=Nil;  ResultError:=SetVol(DummyString,OldVol); end; function TDCreadByte(var Error:Boolean):Byte;  var    ch:char;    GotChar:Boolean;    Count:integer;      begin     GotChar:=False;    Error:=False;    Count:=0;    repeat      Count:=Count+1;      if InReady(SPortA) then        begin          GetChar(SPortA,ch);          if SerResult<>noErr then  {error on get char}            begin              debugdialog(SerResult,'GetChar error',0);              Error:=true;            end          else            GotChar:=True;        end      else        begin          if SerResult<>noErr then  {error on inready}            begin              debugdialog(SerResult,'inready error',0);              Error:=true;            end;          SendChar(SportA,Chr(17));          if SerResult<>noErr then  {error on inready}            begin              debugdialog(SerResult,'Send Char error',0);              Error:=true;            end;        end;    until GotChar or (Count>1000) or error;    if Count>1000 then      begin        debugdialog(0,'readbyte 1000 error',0);        Error:=true;      end;    TDCReadByte := Ord(ch);  end;   procedure TDCReadEvent{(var TheEvent:EventType;     var Error:Boolean)};   var    FoundAll:Boolean;    Count:integer;    Byte1,Byte2,Byte3,Byte4:Byte;    i:integer;    DeviceNumber:integer;      begin    for i:= 0 to 15 do      begin        TheEvent.TDCEvent[i].DataA:=10;        TheEvent.TDCEvent[i].DataB:=5;        TheEvent.TDCEvent[i].Found:=False;      end;    FoundAll:=False;    Error:=False;    Count:=0;    repeat      begin        count:=Count+1;        Byte1:= TDCreadByte(Error);        if BitAnd(Byte1,$C0) = $00 then          begin            Byte2:=TDCreadByte(Error);            if BitAnd(Byte2,$C0) = $40 then              begin                Byte3:=TDCreadByte(Error);                if BitAnd(Byte3,$C0) = $80 then                  begin                    Byte4:=TDCreadByte(Error);                    if BitAnd(Byte4,$C0) = $C0 then                      begin                        DeviceNumber:=BitAnd(Byte4,$0F);                        if not TheEvent.TDCEvent[DeviceNumber].Found then                          begin                            TheEvent.TDCEvent[DeviceNumber].DataA:=BitAnd(Byte1,$3F)+BitAnd(Byte2,$0F)*64;                            TheEvent.TDCEvent[DeviceNumber].DataB:=BitAnd(Byte3,$3F);                            TheEvent.TDCEvent[DeviceNumber].ADCEvent:=BitAnd(Byte1,$3F)+BitAnd(Byte2,$3F)*64;                            TheEvent.TDCEvent[DeviceNumber].Found:=True;                          end;                        if DeviceNumber=0 then                          FoundAll:=true;                      end;                  end;              end;          end;      end;    until FoundAll or (Count=100) or error;    if Count = 100 then      begin        debugdialog(0,'readEvent 100 error',0);        Error:=true;      end;  end; procedure TDCClose;   begin    DisposHandle(Handle(TheLookupTableHandle));    CloseSPort(SPortA);  end;beginend.