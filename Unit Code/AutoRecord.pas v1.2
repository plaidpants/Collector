unit AutoRecord(-332);interface {$U-} {Use My own include Librarys} {$R DialogRsrc} {Load my reasources (dialog boxes etc..)} {$U Jim Surine:Programming:Units:My Units:Dialogs} {$U Jim Surine:Programming:Units:My Units:Patterns} {$U Jim Surine:Programming:Units:My Units:Axis2} {$U Jim Surine:Programming:Units:My Units:RecordReal} {$U Jim Surine:Programming:Units:My Units:RecordInteger} {$U Jim Surine:Programming:Units:My Units:RecordLongInt} {$U Jim Surine:Programming:Units:My Units:Plot} {$U Jim Surine:Programming:Units:Mews Units:Serial} {$I-} {$O Jim Surine:Programming:Units:My Units:AutoRecord} uses Memtypes,            {Basic types stanadard} QuickDraw,           {Quickdraw standard} OSIntf,              {Operating system standard} ToolIntf,            {Tools standard} PackIntf,            {Package stuff (List Manager, Decimal to string convert)} sane,                {For Real number conversions}  PasInOut, Serial, Patterns, Dialogs, Axis2, RecordReal, RecordInteger, RecordLongInt, Plot; const  AutoRecordDisplayID = 8114;{AutoRecord Display parameters editing dialog}  AutoRecordDataID = 21962;  {AutoRecord Data parameters editing dialog}  AutoRecordInfoID =4871;type  AutoRecordDataType =  Real;      AutoRecordInfoType =     record      NumberOfDelay : integer;      StartDelay : LongInt;      StepDelay :integer;      NumberPerDelay:integer;      Title:Str255;      Note:Str255;      DrawOption:integer;    end;  AutoRecordType =     record      AutoRecordData :        record          PlotData:PlotType;          Sum:real;          SumSquared:Real;        end;      Delay:LongInt;      NumberAnal:integer;      NumberProcess : integer;      AutoRecordInfo : AutoRecordInfoType;    end;         AutoRecordAnalType = PLotAnalType;    procedure InitAutoRecord (var AutoRecord : AutoRecordType;         ThePort:WindowPtr);          procedure CloseAutoRecord (var AutoRecord : AutoRecordType); procedure AddToAutoRecord (var AutoRecord : AutoRecordType;         Number : AutoRecordDataType;         ThePort:WindowPtr);          procedure DrawAutoRecord (var TheAutoRecord : AutoRecordType;          ThePort:WindowPtr);  Procedure SaveAutoRecordAsText (var TheAutoRecord : AutoRecordType;          Reply:SFReply;          var OutPut:Text); Procedure LoadAutoRecordAsText (var TheAutoRecord : AutoRecordType;          Reply:SFReply;          var Input:Text);  procedure AutoRecordDisplayDialog (var AutoRecord : AutoRecordType;            ThePort:WindowPtr);  procedure AutoRecordDataDialog (var AutoRecord : AutoRecordType;                ThePort:WIndowPtr); procedure AutoRecordAnal(var AutoRecordAnal:AutoRecordAnalType;            var AutoRecord : AutoRecordType); procedure AutoRecordInfoDialog (var AutoRecord : AutoRecordType);implementationProcedure SaveAutoRecordAsText {(var TheAutoRecord : AutoRecordType;          Reply:SFReply;          var OutPut:Text)};		begin			with TheAutoRecord do				begin      writeln(Output,AutoRecordInfo.NumberOfDelay);      writeln(Output,AutoRecordInfo.StartDelay);      writeln(Output,AutoRecordInfo.StepDelay);      writeln(Output,AutoRecordInfo.NumberPerDelay);      writeln(Output,AutoRecordInfo.Title);      writeln(Output,AutoRecordInfo.Note);      writeln(Output,AutoRecordInfo.DrawOption);      writeln(Output,NumberProcess);      writeln(Output,NumberAnal);      writeln(Output,Delay);      writeln(Output,AutoRecordData.Sum);      writeln(Output,AutoRecordData.SumSquared);      SavePlotAsText(TheAutoRecord.AutoRecordData.PlotData,Reply,OutPut);				end;		end;Procedure LoadAutoRecordAsText {(var TheAutoRecord : AutoRecordType;          Reply:SFReply;          var Input:Text)};    		begin		 with TheAutoRecord do				begin      Readln(Input,AutoRecordInfo.NumberOfDelay);      Readln(Input,AutoRecordInfo.StartDelay);      Readln(Input,AutoRecordInfo.StepDelay);      Readln(Input,AutoRecordInfo.NumberPerDelay);      Readln(Input,AutoRecordInfo.Title);      Readln(Input,AutoRecordInfo.Note);      Readln(Input,AutoRecordInfo.DrawOption);      Readln(Input,NumberProcess);      Readln(Input,NumberAnal);      Readln(Input,Delay);      Readln(Input,AutoRecordData.Sum);      Readln(Input,AutoRecordData.SumSquared);        LoadPLotAsText(AutoRecordData.PlotData,Reply,InPut);				end;		end;procedure CheckAutoRecord( var AutoRecord : AutoRecordType); begin end; procedure InitAutoRecord {(var AutoRecord : AutoRecordType;         ThePort:WIndowPtr)};  var    Seconds:longInt;    TheString:Str255;     begin    CheckAutoRecord(AutoRecord);    GetPort(ThePort);        with AutoRecord.AutoRecordData.PlotData.PlotInfo do        begin                with AxisInfo do                     begin                         DefaultAxis(AxisInfo,ThePort);                                                  DataRect.Bottom:=-1000;                         DataRect.top:=1000;                         DataRect.Left:=0;                         DataRect.Right:=6000;                                                  XLog:=0;                         YLog:=0;                                                  XMinorTicks:=5;                         YMinorTicks:=5;                                                  XMajorTicks:=10;                         YMajorTicks:=10;                                                  XGridMinor:=0;                         XGridMajor:=8;                                                  YGridMinor:=0;                         YGridMajor:=8;                                                  Title:=AutoRecord.AutoRecordinfo.Title;                                                  Note:=AutoRecord.AutoRecordinfo.Note;                                                  AdjustAxis(AxisInfo,ThePort);                     end;                    TypeOfData:=2;                                        DisplayX:=3;                    DisplayY:=1;                               DisplayPointType:=1;                    DisplayLineType:=0;                               DisplayXError:=0;                    DisplayYError:=2;                               DisplayErrorType:=1;                               PlotDensity:=1;                               PlotStart:=0;                    NumberToPlot:=-1;                               PlotTrack:=1;                        DrawOption:=0;        end;    with AutoRecord.AutoRecordData.plotData.PLotData.RecordReal.RecordRealInfo do        begin            NumberPerRecord := 3;            NumberToRecord:=32000;            Title :='Auto Record Data';            DrawOption :=0;        end;            InitPlot(AutoRecord.AutoRecordData.plotData,ThePort );  AutoRecord.Delay:=AutoRecord.AutoRecordInfo.StartDelay;  AutoRecord.AutoRecordData.SumSquared:=0;  AutoRecord.AutoRecordData.Sum:=0;  AutoRecord.NumberProcess:=0;  AutoRecord.NumberAnal := 0; end; procedure CloseAutoRecord {(var AutoRecord : AutoRecordType)};  begin    ClosePLot(AutoRecord.AutoRecordData.PlotData);  end; Procedure SendByte(TheByte:Byte;Var error:Boolean);  var    ch:char;      begin     Ch:=Chr(TheByte);    SendChar(SPortA,ch);  end;      Procedure ClearBuffer(var Error:Boolean);  var    ch:char;    Count:integer;      begin    Error:=False;    count:=0;    while InReady(SPortA) and not error and (Count<110) do      begin        GetChar(SPortA,ch);        if SerResult<>noErr then  {error on get char}          begin            debugdialog(SerResult,'GetChar error in clear buffer count',0);            Error:=true;          end;        count:=Count+1;      end  end;  Procedure Send24Bit(TheNumber:LongInt; var Error:Boolean);          begin      SendByte(BitShift(bitAnd(TheNumber,$00FC0000),-18)+$C0,error);      SendByte(BitShift(bitAnd(TheNumber,$0003F000),-12)+$80,error);      SendByte(BitShift(bitAnd(TheNumber,$00000FC0),-06)+$40,error);      SendByte(BitShift(bitAnd(TheNumber,$0000003F),-00)+$00,error);    end;      Function LongInt2BCD(TheNumber:LongInt):LongInt;      var      Digits:Array [0..5] of integer;      BCD:LongInt;      i:integer;          begin      for i:=5 downto 0 do        begin          Digits[i]:=trunc(TheNumber/power(10,i));          TheNumber:=Trunc(TheNumber-Digits[i]*power(10,i));        end;              BCD:=0;      for i:= 5 downto 0 do        begin          BCD:=BitShift(BCD,4);          BCD:=BCD+Digits[i];        end;            LongInt2BCD:=BCD;    end;     procedure AddToAutoRecord {(var AutoRecord : AutoRecordType;         Number : AutoRecordDataType;         ThePort:WindowPtr;         var error:Boolean)};    var  BCDDelay:LongInt;  error:Boolean;  Numbers:PlotDataType;  OldPort:WindowPtr;   begin    GetPort(OldPort);  SetPort(ThePort);  if (AutoRecord.NumberAnal < AutoRecord.AutoRecordInfo.NumberOfDelay) then    begin      AutoRecord.AutoRecorddata.Sum:=AutoRecord.AutoRecorddata.Sum+Number;      AutoRecord.AutoRecorddata.SumSquared:=AutoRecord.AutoRecorddata.SumSquared+Number*Number;            AutoRecord.NumberProcess:=AutoRecord.NumberProcess+1;            if (AutoRecord.NumberProcess >= AutoRecord.AutoRecordInfo.NumberPerDelay ) then        begin          Numbers.RecordRealData[1]:=AutoRecord.AutoRecordData.Sum/AutoRecord.NumberProcess;          Numbers.RecordRealData[2]:=sqrt((AutoRecord.AutoRecordData.SumSquared/AutoRecord.NumberProcess)            -(Numbers.RecordRealData[1]*Numbers.RecordRealData[1]));          Numbers.RecordRealData[3]:=AutoRecord.Delay;          AddToPlot(AutoRecord.AutoRecordData.PlotData,Numbers,ThePort,Error);                    AutoRecord.NumberAnal:=AutoRecord.NumberAnal+1;                    AutoRecord.AutoRecordData.SumSquared:=0;          AutoRecord.AutoRecordData.Sum:=0;          AutoRecord.NumberProcess:=0;                              AutoRecord.Delay:=AutoRecord.AutoRecordinfo.StartDelay+AutoRecord.AutoRecordinfo.StepDelay*AutoRecord.NumberAnal;          BCDDelay:=LongInt2BCD(AutoRecord.Delay);          Send24Bit(BCDDelay,Error);          ClearBuffer(error);        end;    end  else    Send24Bit(8,error);   SetPort(OldPort); end; procedure DrawAutoRecord {(var TheAutoRecord : AutoRecordType;                ThePort:WindowPtr)};  begin    DrawPlot(TheAutoRecord.AutoRecordData.PlotData,ThePort);  end;   procedure AutoRecordDisplayDialog {(var AutoRecord : AutoRecordoType;            ThePort:WindowPtr)}; begin   PlotDisplayDialog(AutoRecord.AutoRecordData.PlotData,ThePort); end; procedure SetGetAutoRecordDataDialog (var AutoRecord : AutoRecordType;         var DialogPointer : DialogPtr;         SetGet : boolean); begin  with AutoRecord.AutoRecordinfo do   begin    setGetDlgLongInt(3, StartDelay, DialogPointer, SetGet);    setGetDlginteger(4, NumberofDelay, DialogPointer, SetGet);    setGetDlginteger(5, StepDelay, DialogPointer, SetGet);    setGetDlginteger(6, NumberPerDelay, DialogPointer, SetGet);    SelectText(DialogPointer,3);   end; end; procedure AutoRecordDataDialog { (var AutoRecord: AutoRecordType;                  ThePort:WindowPtr)};  var   DialogPointer : DialogPtr;   OldPort:WindowPtr;    begin  GetPort(OldPort);  DialogPointer := GetNewDialog(AutoRecordDataID, nil, pointer(-1));  SetGetAutoRecordDataDialog(AutoRecord, dialogPointer, true);  ShowHide(DialogPointer, true);  Modal( OKCancelType, DialogPointer);  if not CancelButton then    begin      OKCancelDialog('Changing a AutoRecords data ranges erases the AutoRecord');      if not CancelButton then        begin          SetGetAutoRecordDataDialog(AutoRecord, DialogPointer, false);          InitAutoRecord(AutoRecord,ThePort);        end;    end;  DisposDialog(DialogPointer);    if Not CancelButton then     PlotDataDialog(AutoRecord.AutoRecordData.PlotData,ThePort);  CheckAutoRecord(AutoRecord);  SetPort(OldPort); end; procedure AutoRecordAnal{(var AutoRecordAnal:AutoRecordAnalType;            var AutoRecord : AutoRecordType)};  begin  end;   procedure AutoRecordInfoDialog { (var AutoRecord : AutoRecordType)};          var        OldPort:WindowPtr;            begin      GetPort(Oldport);      SetPort(OldPort);    end;  begin end.