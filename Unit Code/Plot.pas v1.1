unit Plot(-77);interface {$U-} {Use My own include Librarys} {$R DialogRsrc} {Load my reasources (dialog boxes etc..)} {$U Jim Surine:Programming:Units:My Units:Dialogs} {$U Jim Surine:Programming:Units:My Units:Patterns} {$U Jim Surine:Programming:Units:My Units:Axis2} {$U Jim Surine:Programming:Units:My Units:RecordInteger} {$U Jim Surine:Programming:Units:My Units:RecordLongInt} {$U Jim Surine:Programming:Units:My Units:RecordReal} {$I-} {$O Jim Surine:Programming:Units:My Units:Plot} uses Memtypes,            {Basic types stanadard} QuickDraw,           {Quickdraw standard} OSIntf,              {Operating system standard} ToolIntf,            {Tools standard} PackIntf,            {Package stuff (List Manager, Decimal to string convert)} sane,                {For Real number conversions}  PasInOut,  Dialogs, Patterns, Axis2, RecordInteger, RecordLongInt, RecordReal;  const  PlotInfoID = 28991; {Plot info parameters editing dialog}  PlotDataID = 2262;  {Plot Data parameters editing dialog}  PlotDisplayID = 7252;    type     RealRect = record    Top:Real;    Bottom:Real;    Left:Real;    Right:Real;   end;      PlotAnalType = packed record    case integer of     0 : (       RecordIntegerAnal : RecordIntegerAnalType     );     1 : (       RecordLongIntAnal : RecordLongIntAnalType     );     2 : (       RecordRealAnal : RecordRealAnalType;     );   end;  PlotDataType = packed record    case integer of     0 : (       RecordIntegerData : RecordIntegerDataType     );     1 : (       RecordLongIntData : RecordLongIntDataType     );     2 : (       RecordRealData : RecordRealDataType;     );   end;  PlotInfoType = record    AxisInfo:AxisInfoType;    TypeOfData:integer;        NumberRecorded:LongInt;        DisplayX:integer;    DisplayY:integer;        DisplayPointType:Integer;    DisplayLineType:Integer;        DisplayXError:integer;    DisplayYError:integer;        DisplayErrorType:Integer;        PlotDensity:integer;        PlotStart:LongInt;    NumberToPlot:LongInt;        PlotTrack:integer;    PlotTrackAxis:Integer;        DrawOption:integer;       end;  PlotType = record    PlotData:      record        case integer of         0 : (           RecordInteger : RecordIntegerType         );         1 : (           RecordLongInt : RecordLongIntType         );         2 : (           RecordReal : RecordRealType         );       end;    PlotInfo : PlotInfoType;   end; procedure InitPlot (var ThePlot : PlotType;         ThePort:WindowPtr); procedure ClosePlot (var ThePlot : PlotType);          procedure AddToPlot (var ThePlot : PlotType;         Number : PlotDataType;         ThePort:WindowPtr;         var error:Boolean);          procedure SetGetAddPlot (var ThePLot : PlotType;         var Number : PlotDataType;         Loc:LongInt;         SetGetAdd:Integer;         ThePort:WindowPtr);          procedure DrawPlot (var ThePlot : PlotType;                    ThePort:WindowPtr);  Procedure SavePlotAsText (var ThePlot : PlotType;          Reply:SFReply;          var OutPut:Text); Procedure LoadPlotAsText (var ThePlot : PlotType;          Reply:SFReply;          var Input:Text); procedure PlotDisplayDialog(var ThePlot : PlotType;                          ThePOrt:WindowPtr);  procedure PlotDataDialog (var ThePlot : PlotType;                          ThePOrt:WindowPtr);procedure PlotAnal(var ThePlotAnal:PlotAnalType;            var ThePlot : PlotType); procedure PlotInfoDialog (var ThePlot : PlotType); implementation{********************Plot Procedures*********************}Procedure SavePlotAsText {(var ThePlot : PlotType;          Reply:SFReply;          var OutPut:Text)};		begin		 with ThePlot do				begin        with PlotInfo do            begin               SaveAxisasText(ThePlot.PlotInfo.Axisinfo,Reply,OutPut);                    writeln(Output,TypeOfData);                              writeln(Output,NumberRecorded);                              writeln(Output,DisplayX);               writeln(Output,DisplayY);                              writeln(Output,DisplayPointType);               writeln(Output,DisplayLineType);                             writeln(Output,DisplayXError);               writeln(Output,DisplayYError);                              writeln(Output,DisplayErrorType);               writeln(Output,PlotDensity);               writeln(Output,PlotStart);               writeln(Output,NumberToPlot);               writeln(Output,PlotTrack);               writeln(Output,PlotTrackAxis);               writeln(Output,DrawOption);            end;                     case PlotInfo.TypeOfData of            0:SaveRecordIntegerAsText(PlotData.RecordInteger,Reply,OutPut);            1:SaveRecordLongIntAsText(PlotData.RecordLongInt,Reply,OutPut);            2:SaveRecordRealAsText(PlotData.RecordReal,Reply,OutPut);         end;				end;		end;Procedure LoadPlotAsText {(var ThePlot : PlotType;          Reply:SFReply;          var Input:Text)};		begin		 with ThePlot do				begin        with PlotInfo do            begin               LoadAxisasText(ThePlot.PlotInfo.Axisinfo,Reply,Input);               Readln(Input,TypeOfData);                              Readln(Input,NumberRecorded);                              Readln(Input,DisplayX);               Readln(Input,DisplayY);                              Readln(Input,DisplayPointType);               Readln(Input,DisplayLineType);                             Readln(Input,DisplayXError);               Readln(Input,DisplayYError);                              Readln(Input,DisplayErrorType);               Readln(Input,PlotDensity);               Readln(Input,PlotStart);               Readln(Input,NumberToPlot);               Readln(Input,PlotTrack);               Readln(Input,PlotTrackAxis);               Readln(Input,DrawOption);            end;          case PlotInfo.TypeOfData of            0:LoadRecordIntegerAsText(PlotData.RecordInteger,Reply,Input);            1:LoadRecordLongIntAsText(PlotData.RecordLongInt,Reply,Input);            2:LoadRecordRealAsText(PlotData.RecordReal,Reply,Input);         end;				end;		end; procedure InitPlot {(var ThePlot : PlotType;         ThePort:WindowPtr)};     begin    AdjustAxis(ThePlot.PlotInfo.AxisInfo,ThePort);        ThePlot.PlotInfo.NumberRecorded:=0;    case ThePlot.PlotInfo.TypeOfData of       0:InitRecordInteger(ThePlot.PlotData.RecordInteger,ThePort);       1:InitRecordLongInt(ThePlot.PlotData.RecordLongInt,ThePort);       2:InitRecordReal(ThePlot.PlotData.RecordReal,ThePort);    end; end; procedure ClosePlot {(var ThePlot : PlotType)};     begin     case ThePlot.PlotInfo.TypeOfData of        0:CloseRecordInteger(ThePlot.PlotData.RecordInteger);        1:CloseRecordLongInt(ThePlot.PlotData.RecordLongInt);        2:CloseRecordReal(ThePlot.PlotData.RecordReal);     end;    end; procedure SetGetAddPlot {(var ThePLot : PlotType;         var Number : PlotDataType;         Loc:LongInt;         SetGetAdd:Integer;         ThePort:WindowPtr)}; begin   case ThePlot.PlotInfo.TypeOfData of      0:SetGetAddRecordInteger(ThePlot.PlotData.RecordInteger,Number.RecordIntegerData,Loc,SetGetAdd,ThePort);      1:SetGetAddRecordLongInt(ThePlot.PlotData.RecordLongInt,Number.RecordLongIntData,Loc,SetGetAdd,ThePort);      2:SetGetAddRecordReal(ThePlot.PlotData.RecordReal,Number.RecordRealData,Loc,SetGetAdd,ThePort);   end;  end;   procedure AddToPlot {(var ThePlot : PlotType;         Number : PlotDataType;         ThePort:WindowPtr;         Var Error:Boolean)};      var   TheRealPoint,TheRealError:RealPoint;   ThePoint:Point;   inview:boolean;   OldPort:WindowPtr;   ErrorRect:Rect;    begin   Error:=False;   case ThePlot.PlotInfo.TypeOfData of      0:AddToRecordInteger(ThePlot.PlotData.RecordInteger,Number.RecordIntegerData,ThePort,error);      1:AddToRecordLongInt(ThePlot.PlotData.RecordLongInt,Number.RecordLongIntData,ThePort,error);      2:AddToRecordReal(ThePlot.PlotData.RecordReal,Number.RecordRealData,ThePort,error);   end;   if not error then      begin         ThePlot.PlotInfo.NumberRecorded:=ThePlot.PlotInfo.NumberRecorded+1;                 if ThePlot.PlotInfo.PlotTrack <> 0 then             begin                 GetPort(OldPort);                 SetPort(ThePort);                 ClipRect(ThePlot.PlotInfo.AxisInfo.DisplayRect);                 case ThePlot.PlotInfo.TypeOfData of                     0:;                     1:;                     2:                         begin                             if ThePlot.PlotInfo.DisplayX<>0 then                                 TheRealPoint.x:=Number.RecordRealData[ThePlot.PlotInfo.DisplayX]                             else                               TheRealPoint.X:=ThePlot.PlotInfo.NumberRecorded-1;                                                          if ThePlot.PlotInfo.DisplayY<>0 then                                 TheRealPoint.Y:=Number.RecordRealData[ThePlot.PlotInfo.DisplayY]                             else                               TheRealPoint.Y:=ThePlot.PlotInfo.NumberRecorded-1;                                                          if ThePlot.PlotInfo.DisplayXError <> 0 then                                 TheRealError.X:=Number.RecordRealData[ThePlot.PlotInfo.DisplayXError]                             else                                 TheRealError.X:=0;                                                          if ThePlot.PlotInfo.DisplayYError<>0 then                                 TheRealError.Y:=Number.RecordRealData[ThePlot.PlotInfo.DisplayYError]                             else                                 TheRealError.Y:=0;                         end;                  end;                                  case ThePlot.PlotInfo.DisplayLineType of                 1:                  begin                     PenPat(MyPatterns[16]);                     PenSize(1,1);                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     LineTo(ThePoint.h,ThePoint.v);                  end;                 end;                                  case ThePlot.PlotInfo.DisplayPointType of                 0:                  begin                     PenPat(MyPatterns[16]);                     PenSize(1,1);                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     MoveTo(ThePoint.h,ThePoint.v);                     Line(0,0);                  end;                 1:                  begin                     PenPat(MyPatterns[16]);                     PenSize(1,1);                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     MoveTo(ThePoint.h-1,ThePoint.v-1);                     Line(2,2);                     Move(-2,0);                     Line(2,-2);                  end;                 2:                  begin                     PenPat(MyPatterns[16]);                     PenSize(1,1);                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     MoveTo(ThePoint.h,ThePoint.v-1);                     Line(0,2);                     Move(-1,-1);                     Line(2,0);                  end;                 3:                  begin                     PenPat(MyPatterns[16]);                     PenSize(1,1);                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     MoveTo(ThePoint.h-1,ThePoint.v-1);                     Line(0,2);                     Line(2,0);                     Line(0,-2);                     Line(-2,0);                  end;                 end;                                 case ThePlot.PlotInfo.DisplayErrorType of                 1:                  begin                     PenPat(MyPatterns[16]);                     PenSize(1,1);                                          TheRealPoint.x:=TheRealPoint.x+TheRealError.X;                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     MoveTo(ThePoint.h,ThePoint.v);                                          TheRealPoint.x:=TheRealPoint.x-2*TheRealError.X;                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     LineTo(ThePoint.h,ThePoint.v);                                          TheRealPoint.x:=TheRealPoint.x+TheRealError.X;                     TheRealPoint.Y:=TheRealPoint.Y+TheRealError.Y;                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     MoveTo(ThePoint.h,ThePoint.v);                                          TheRealPoint.Y:=TheRealPoint.Y-2*TheRealError.Y;                     WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                     LineTo(ThePoint.h,ThePoint.v);                  end;                 end;               ClipRect(ThePort^.PortRect);               SetPort(OldPort);             end        end; end;  procedure DrawPlot {(var ThePlot : PlotType;                  ThePort:WindowPtr)};  var   i:integer;   Loc:integer;   ThePoint:Point;   TheRealPoint:RealPoint;   InView:Boolean;   TheRealError:RealPoint;   CurrCount:Integer;   Numbers:PlotDataType;   OldPort:WindowPtr;   theEvent:EventRecord;      NumberPlot:LongInt;   MaxNumberPLot:LongInt;    begin    getPort(OldPort);    SetPort(ThePort);        AdjustAxis(ThePlot.PlotInfo.AxisInfo,ThePort);    DrawAxis(ThePlot.PlotInfo.AxisInfo,ThePort);        ClipRect(ThePlot.PlotInfo.AxisInfo.DisplayRect);        MaxNumberPLot:=trunc((ThePlot.PlotInfo.NumberRecorded-ThePlot.PlotInfo.PlotStart)      /ThePlot.PlotInfo.PlotDensity);        if ThePlot.PlotInfo.NumberToPlot < 0 then      NumberPlot:=MaxNumberPLot    else      begin        NumberPlot:=ThePlot.PlotInfo.NumberToPlot;        if ThePlot.PlotInfo.NumberToPlot > MaxNumberPLot then          NumberPlot:=MaxNumberPLot;      end;        for i:= 0 to NumberPlot  do        begin            If eventAvail(keydownmask,theEvent) then              begin                ClipRect(ThePort^.PortRect);                Exit;              end;                          Loc:=i*ThePlot.PlotInfo.PlotDensity+ThePlot.PlotInfo.PlotStart;                        if Loc<ThePlot.PlotInfo.NumberRecorded then                begin                     Case ThePlot.PlotInfo.TypeOfData of                         0:                             begin                             end;                         1:                             begin                             end;                         2:                             Begin                                  SetGetAddRecordReal(ThePlot.PlotData.RecordReal,                                  Numbers.RecordRealData,Loc,1,ThePort);                                  if ThePlot.PlotInfo.DisplayX<>0 then                                      TheRealPoint.x:=Numbers.RecordRealData[ThePlot.PlotInfo.DisplayX]                                  else                                    TheRealPoint.X:=Loc;                                  if ThePlot.PlotInfo.DisplayY<>0 then                                      TheRealPoint.Y:=Numbers.RecordRealData[ThePlot.PlotInfo.DisplayY]                                  else                                    TheRealPoint.Y:=Loc;                                 if ThePlot.PlotInfo.DisplayXError<>0 then                                    TheRealError.X:=Numbers.RecordRealData[ThePlot.PlotInfo.DisplayXError]                                 else                                    TheRealError.X:=0;                                 if ThePlot.PlotInfo.DisplayYError<>0 then                                    TheRealError.Y:=Numbers.RecordRealData[ThePlot.PlotInfo.DisplayYError]                                 else                                    TheRealError.Y:=0;                             end;                     end;                                          {Add point and error bars types here}                                          case ThePlot.PlotInfo.DisplayLineType of                     1:                      begin                         PenPat(MyPatterns[16]);                         PenSize(1,1);                         WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                         LineTo(ThePoint.h,ThePoint.v);                      end;                     end;                                 case ThePlot.PlotInfo.DisplayPointType of            0:             begin                PenPat(MyPatterns[16]);                PenSize(1,1);                WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                MoveTo(ThePoint.h,ThePoint.v);                Line(0,0);             end;            1:             begin                PenPat(MyPatterns[16]);                PenSize(1,1);                WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                MoveTo(ThePoint.h-1,ThePoint.v-1);                Line(2,2);                Move(-2,0);                Line(2,-2);             end;            2:             begin                PenPat(MyPatterns[16]);                PenSize(1,1);                WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                MoveTo(ThePoint.h,ThePoint.v-1);                Line(0,2);                Move(-1,-1);                Line(2,0);             end;            3:             begin                PenPat(MyPatterns[16]);                PenSize(1,1);                WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                MoveTo(ThePoint.h-1,ThePoint.v-1);                Line(0,2);                Line(2,0);                Line(0,-2);                Line(-2,0);             end;            end;                                          case ThePlot.PlotInfo.DisplayErrorType of                     1:                      begin                         PenPat(MyPatterns[16]);                         PenSize(1,1);                                                  TheRealPoint.x:=TheRealPoint.x+TheRealError.X;                         WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                         MoveTo(ThePoint.h,ThePoint.v);                                                  TheRealPoint.x:=TheRealPoint.x-2*TheRealError.X;                         WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                         LineTo(ThePoint.h,ThePoint.v);                                                  TheRealPoint.x:=TheRealPoint.x+TheRealError.X;                         TheRealPoint.Y:=TheRealPoint.Y+TheRealError.Y;                         WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                         MoveTo(ThePoint.h,ThePoint.v);                                                  TheRealPoint.Y:=TheRealPoint.Y-2*TheRealError.Y;                         WhereAxis(ThePlot.PlotInfo.AxisInfo,TheRealPoint,ThePoint,InView);                         LineTo(ThePoint.h,ThePoint.v);                      end;                     end;                end;        end;    ClipRect(ThePort^.PortRect);    SetPort(OldPort); end;      procedure SetGetPlotDisplayDialog (var ThePlot : PlotType;         var DialogPointer : DialogPtr;         SetGet : boolean); begin  with ThePlot.Plotinfo do   begin     setGetDlgLongInt(3, NumberToPLot, DialogPointer, SetGet);    setGetDlgLongInt(4, PlotStart, DialogPointer, SetGet);    setGetDlginteger(5, PlotDensity, DialogPointer, SetGet);    setGetDlginteger(6, PLotTrack, DialogPointer, SetGet);    setGetDlginteger(7, DisplayPointType, DialogPointer, SetGet);    setGetDlginteger(8, DisplayLineType, DialogPointer, SetGet);    setGetDlginteger(9, DisplayErrorType, DialogPointer, SetGet);    setGetDlginteger(10, DisplayX, DialogPointer, SetGet);    setGetDlginteger(11, DisplayY, DialogPointer, SetGet);    setGetDlginteger(12, DisplayXError, DialogPointer, SetGet);    setGetDlginteger(13, DisplayYError, DialogPointer, SetGet);    SelectText(DialogPointer,3);   end; end; procedure PlotDisplayDialog {(var ThePlot : PlotType;                          ThePOrt:WindowPtr)};    var   DialogPointer : DialogPtr;   OldPort:WIndowPtr;     begin  GetPort(OldPort);       DialogPointer := GetNewDialog(PlotDisplayID, nil, pointer(-1));       SetGetPlotDisplayDialog(ThePlot, dialogPointer, true);       ShowHide(DialogPointer, true);       Modal( OKCancelType, DialogPointer);       if not CancelButton then          SetGetPlotDisplayDialog(ThePlot, DialogPointer, false);       DisposDialog(DialogPointer);         if not CancelButton then    AxisInfoDialog(ThePlot.Plotinfo.AxisInfo,ThePort);   if not CancelButton then    case ThePlot.PlotInfo.TypeOfData of      0:RecordIntegerDisplayDialog ( ThePlot.PlotData.RecordInteger,ThePOrt);      1:RecordLongIntDisplayDialog ( ThePlot.PlotData.RecordLongInt,ThePOrt);      2:RecordRealDisplayDialog ( ThePlot.PlotData.RecordReal,ThePOrt);    end;  SetPort(OldPort); end; procedure PlotDataDialog { (var ThePlot : PlotType;                          ThePOrt:WindowPtr)};   begin    case ThePlot.PlotInfo.TypeOfData of      0:RecordIntegerDataDialog ( ThePlot.PlotData.RecordInteger,ThePOrt);      1:RecordLongIntDataDialog ( ThePlot.PlotData.RecordLongInt,ThePOrt);      2:RecordRealDataDialog ( ThePlot.PlotData.RecordReal,ThePOrt);   end;   If Not CancelButton then      InitPlot(ThePlot,ThePort); end;procedure PlotAnal{(var ThePlotAnal:PlotAnalType;            var ThePlot : PlotType)};begin   case ThePlot.PlotInfo.TypeOfData of      0:RecordIntegerAnal(ThePlotAnal.RecordIntegerAnal,ThePlot.PlotData.RecordInteger);      1:RecordLongIntAnal(ThePlotAnal.RecordLongIntAnal,ThePlot.PlotData.RecordLongInt);      2:RecordRealAnal(ThePlotAnal.RecordRealAnal,ThePlot.PlotData.RecordReal);   end;end; procedure PlotInfoDialog {(var ThePlot : PlotType)};  begin  case ThePlot.PlotInfo.TypeOfData of     0:RecordIntegerInfoDialog(ThePlot.PlotData.RecordInteger);     1:RecordLongIntInfoDialog(ThePlot.PlotData.RecordLongInt);     2:RecordRealInfoDialog(ThePlot.PlotData.RecordReal);  end; end;  begin end.