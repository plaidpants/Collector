unit Axis2(-11123);interface {$U-} {Use My own include Librarys} {$U Jim Surine:Programming:Units:My Units:Patterns} {$U Jim Surine:Programming:Units:My Units:Dialogs} {$O Jim Surine:Programming:Units:My Units:Axis2}uses Memtypes,            {Basic types stanadard} QuickDraw,           {Quickdraw standard} OSIntf,              {Operating system standard} ToolIntf,            {Tools standard}  PackIntf, sane, Patterns, PasInOut, Dialogs;            {Package stuff (List Manager, Decimal to string convert)}const  AxisInfoID=17643;  type    RealRect=        record            Top,Left,Right,Bottom:real;        end;RealPoint=        record            X,Y:real;        end;    AxisInfoType=record        DisplayRect:Rect;        DataRect:RealRect;                XLog,YLog:integer;                XMinorTicks,YMinorTicks:integer;        XMajorTicks,YMajorTicks:integer;        XIncrement,YIncrement:Real;        XGridMinor,YGridMinor:integer;        XGridMajor,YGridMajor:integer;        XFormat,YFormat:DecForm;                Spacing:integer;        MinorTick:integer;        MajorTick:integer;        LineSize:integer;        LinePattern:integer;                XFontNumber:integer;        XFontSize:integer;        XFontStyle:Style;                YFontNumber:integer;        YFontSize:integer;        YFontStyle:Style;                Title:str255;        TitleFontNumber:integer;        TitleFontSize:integer;        TitleFontStyle:Style;                note:str255;        NoteFontNumber:integer;        NoteFontSize:integer;        NoteFontStyle:Style;     end;function Log(TheReal:Real):Real;Function Power(TheBase,TheExpo:Real):Real;procedure CheckAxisInfo(var AxisInfo:AxisInfoType); procedure AxisInfoDialog (var Axisinfo : AxisinfoType;                        ThePOrt:WindowPtr);procedure DefaultAxis(var AxisInfo:AxisInfoType;                       TheWindow:WindowPtr);procedure AdjustAxis(var AxisInfo:AxisInfoType;                       TheWindow:WindowPtr);procedure DrawAxis(AxisInfo:AxisInfoType;                       TheWindow:WindowPtr);Procedure SaveAxisAsText (var Axisinfo : AxisinfoType;          Reply:SFReply;          var Output:Text);Procedure LoadAxisAsText (var Axisinfo : AxisinfoType;          Reply:SFReply;          var Input:Text);procedure WhereAxis(AxisInfo:AxisInfoType;                       TheRealPoint:RealPoint;                    Var ThePoint:Point;                    InView:boolean);  implementation{********************DrawAxis Procedures**********************}function Log{(TheReal:Real):Real};  begin    Log:=ln(TheReal)/ln(10);  end;  Function Power{(TheBase,TheExpo:Real):Real};  begin    Power:=exp(TheExpo*ln(TheBase));  end; procedure WhereAxis{(AxisInfo:AxisInfoType;                       TheRealPoint:RealPoint;                    Var ThePoint:Point;                    InView:boolean)};        var                                    XDataRange,YDataRange:Real;            XDisplayRange,YDisplayRange:integer;    begin        XDisplayRange:=AxisInfo.DisplayRect.Right-AxisInfo.DisplayRect.Left;        YDisplayRange:=AxisInfo.DisplayRect.bottom-AxisInfo.DIsplayRect.top;        if AxisInfo.XLog<>0 then            begin                XDataRange:=Log(AxisInfo.DataRect.Right/AxisInfo.DataRect.Left);                TheRealPoint.X:=log(TheRealPoint.X/AxisInfo.DataRect.Left);            end        else            begin                TheRealPoint.X:=TheRealPoint.X-AxisInfo.DataRect.Left;                XDataRange:=AxisInfo.DataRect.Right-AxisInfo.DataRect.Left;            end;                    if AxisInfo.YLog<>0 then            begin                YDataRange:=Log(AxisInfo.DataRect.Top/AxisInfo.DataRect.Bottom);                TheRealPoint.Y:=log(TheRealPoint.Y/AxisInfo.DataRect.bottom);            end        else            begin                TheRealPoint.Y:=TheRealPoint.Y-AxisInfo.DataRect.Bottom;                YDataRange:=AxisInfo.DataRect.Top-AxisInfo.DataRect.Bottom;            end;                ThePoint.h:=round(TheRealPoint.X*(XDisplayRange/XDataRange)+AxisInfo.DisplayRect.Left);        ThePoint.v:=round(AxisInfo.DisplayRect.bottom-TheRealPoint.Y*(YDisplayRange/YDataRange));    end;     procedure CheckAxisinfo{(var AxisInfo:AxisInfoType)};    var        TheReal:real;        TheInteger:Integer;            begin       if AxisInfo.XLog<>0 then            begin                if AxisInfo.DataRect.left<=0 then                    AxisInfo.DataRect.left:=1;                if AxisInfo.DataRect.right<=0 then                    AxisInfo.DataRect.right:=1;            end;                if AxisInfo.YLog<>0 then            begin                if AxisInfo.DataRect.top<=0 then                    AxisInfo.DataRect.top:=1;                if AxisInfo.DataRect.bottom<=0 then                    AxisInfo.DataRect.bottom:=1;            end;        if AxisInfo.DataRect.Right<AxisInfo.DataRect.Left then            begin              TheReal:=AxisInfo.DataRect.Right;              AxisInfo.DataRect.Right:=AxisInfo.DataRect.Left;              AxisInfo.DataRect.Left:=TheReal;            end;                    if AxisInfo.DataRect.top<AxisInfo.DataRect.bottom then            begin              TheReal:=AxisInfo.DataRect.top;              AxisInfo.DataRect.top:=AxisInfo.DataRect.bottom;              AxisInfo.DataRect.bottom:=TheReal;            end;                    if AxisInfo.DataRect.Right=AxisInfo.DataRect.Left then          begin            AxisInfo.DataRect.Right:=AxisInfo.DataRect.Left*10;            if AxisInfo.DataRect.Right=AxisInfo.DataRect.Left then              AxisInfo.DataRect.Right:=AxisInfo.DataRect.Left+1;          end;                  if AxisInfo.DataRect.top=AxisInfo.DataRect.bottom then          begin            AxisInfo.DataRect.top:=AxisInfo.DataRect.bottom*10;            if AxisInfo.DataRect.top=AxisInfo.DataRect.bottom then                AxisInfo.DataRect.top:=AxisInfo.DataRect.bottom+1;          end;                  if AxisInfo.DisplayRect.Right<AxisInfo.DisplayRect.Left then            begin              TheInteger:=AxisInfo.DisplayRect.Right;              AxisInfo.DisplayRect.Right:=AxisInfo.DisplayRect.Left;              AxisInfo.DisplayRect.Left:=TheInteger;            end;                    if AxisInfo.DisplayRect.top>AxisInfo.DisplayRect.bottom then            begin              TheInteger:=AxisInfo.DisplayRect.top;              AxisInfo.DisplayRect.top:=AxisInfo.DisplayRect.bottom;              AxisInfo.DisplayRect.bottom:=TheInteger;            end;                    if AxisInfo.DisplayRect.Right=AxisInfo.DisplayRect.Left then            AxisInfo.DisplayRect.Right:=AxisInfo.DisplayRect.Left+100;        if AxisInfo.DisplayRect.top=AxisInfo.DisplayRect.bottom then            AxisInfo.DisplayRect.top:=AxisInfo.DisplayRect.bottom-100;    end;     procedure SetGetAxisInfoDialog (var Axisinfo : AxisInfoType;         var DialogPointer : DialogPtr;         SetGet : boolean); begin  with Axisinfo do   begin    setGetDlginteger(4,XFormat.digits , DialogPointer, SetGet);    setGetDlginteger(5,YFormat.digits, DialogPointer, SetGet);        setGetDlginteger(6, XMinorTicks, DialogPointer, SetGet);    setGetDlginteger(7, YMinorTicks, DialogPointer, SetGet);    setGetDlginteger(8, XMajorTicks, DialogPointer, SetGet);    setGetDlginteger(9, YMajorTicks, DialogPointer, SetGet);        setGetDlgReal(10, XIncrement, DialogPointer, SetGet);    setGetDlgReal(11, YIncrement, DialogPointer, SetGet);        setGetDlginteger(12, XGridMinor, DialogPointer, SetGet);    setGetDlginteger(13, YGridMinor, DialogPointer, SetGet);    setGetDlginteger(14, XGridMajor, DialogPointer, SetGet);    setGetDlginteger(15, YGridMajor, DialogPointer, SetGet);        setGetDlginteger(16, XLog, DialogPointer, SetGet);    setGetDlginteger(17, YLog, DialogPointer, SetGet);    setGetDlgReal(18, DataRect.Left, DialogPointer, SetGet);    setGetDlgReal(19, DataRect.Bottom, DialogPointer, SetGet);    setGetDlgReal(20, DataRect.Right, DialogPointer, SetGet);    setGetDlgReal(21, DataRect.Top, DialogPointer, SetGet);        setGetDlginteger(22, XFontNumber, DialogPointer, SetGet);    setGetDlginteger(23, YFontNumber, DialogPointer, SetGet);    setGetDlginteger(24, XFontSize, DialogPointer, SetGet);    setGetDlginteger(25, YFontSize, DialogPointer, SetGet);    setGetDlginteger(26, Spacing, DialogPointer, SetGet);    setGetDlginteger(27, LineSize, DialogPointer, SetGet);    setGetDlginteger(28, LinePattern, DialogPointer, SetGet);                {MinorTick:integer;        MajorTick:integer;}                    setGetDlgStr255(29, Title, DialogPointer, SetGet);    setGetDlginteger(30, TitleFontNumber, DialogPointer, SetGet);    setGetDlginteger(31, TitleFontSize, DialogPointer, SetGet);    setGetDlgStr255(32, Note, DialogPointer, SetGet);    setGetDlginteger(33, NoteFontNumber, DialogPointer, SetGet);    setGetDlginteger(34, NoteFontSize, DialogPointer, SetGet);    SelectText(DialogPointer,4);   end; end; procedure AxisInfoDialog {(var Axisinfo : AxisinfoType;            ThePort:WindowPtr)};  var   DialogPointer : DialogPtr;   Done:Boolean;  OldPort:WindowPtr;   begin  GetPort(OldPort);  DialogPointer := GetNewDialog(AxisInfoID, nil, pointer(-1));  SetGetAxisINfoDialog(Axisinfo, dialogPointer, true);  ShowHide(DialogPointer, true);  Modal( ManyItemType, DialogPointer);    done :=False;    while not done do    begin     Modal( ManyItemType, DialogPointer);     case ButtonHit of      1:begin         SetGetAxisInfoDialog(Axisinfo, DialogPointer, false);         CheckAxisInfo( AxisInfo );         Done:=true;        end;      2:begin         SetGetAxisInfoDialog(Axisinfo, DialogPointer, false);         CheckAxisInfo( AxisInfo );         AdjustAxis(AxisInfo,ThePort);         SetGetAxisInfoDialog(Axisinfo, DialogPointer, True);        end;      3:Done:=true;     end;   end;     DisposDialog(DialogPointer);  SetPort(OldPort); end;  procedure DefaultAxis{(var AxisInfo:AxisInfoType;                       TheWindow:WindowPtr)};    begin        with AxisInfo do            begin            DisplayRect:=TheWindow^.PortRect;                        DataRect.Bottom:=0;            DataRect.top:=100;            DataRect.Left:=0;            DataRect.Right:=100;                        XLog:=0;            YLog:=0;                        XMinorTicks:=5;            YMinorTicks:=5;                        XMajorTicks:=10;            YMajorTicks:=10;                        XIncrement:=10;            YIncrement:=10;                        XGridMinor:=0;            XGridMajor:=8;                        YGridMinor:=0;            YGridMajor:=8;                        MajorTick:=5;            MinorTick:=2;            Spacing:=5;            LineSize:=1;            LinePattern:=16;                         XFormat.Style:=FixedDecimal;            XFormat.Digits:=1;            YFormat.Style:=FixedDecimal;            YFormat.Digits:=1;                        Title:='Title';            TitleFontNumber:=Times;            TitleFontSize:=18;            TitleFontStyle:=[bold];                        Note:='Note';            NoteFontNumber:=Times;            NoteFontSize:=9;            NoteFontStyle:=[italic];            XFontNumber:=Times;            XFontSize:=12;            XFontStyle:=[];            YFontNumber:=Times;            YFontSize:=12;            YFontStyle:=[];         end;    end;    procedure AdjustAxis{(var AxisInfo:AxisInfoType;                       TheWindow:WindowPtr)};        var            YFontHeight:integer;            MaxYFontWidth:integer;                        XFontHeight:integer;            MaxXFontWidth:integer;                        TitleFontHeight:integer;            NoteFontHeight:integer;                        PageXRange,PageYRange:integer;            PageFontSize:integer;                        XDataRange,YDataRange:Real;            XDisplayRange,YDisplayRange:integer;                        FInfo:FontInfo;            TheString:str255;    begin        CheckAxisInfo(AxisInfo);                {for future use}                {PageXRange:=TheWindow^.DiaplyRect.Right-TheWindow^.PortRect.Left;        PageYRange:=TheWindow^.PortRect.Top-TheWindow^.PortRect.Bottom;}        {Lock Data Range to value}                XDataRange:=AxisInfo.DataRect.Right-AxisInfo.DataRect.Left;        YDataRange:=AxisInfo.DataRect.Top-AxisInfo.DataRect.Bottom;                if AxisInfo.XLog<>0 then           begin              AxisInfo.DataRect.Right:=power(10,round(log(AxisInfo.DataRect.Right)));              AxisInfo.DataRect.Left:=power(10,round(log(AxisInfo.DataRect.Left)));           end        else           begin                          AxisInfo.DataRect.Left:=                round(AxisInfo.DataRect.left/power(10,trunc(log(XDataRange))))                    *power(10,trunc(log(XDataRange)));              XDataRange:=AxisInfo.DataRect.Right-AxisInfo.DataRect.Left;              if Log(XDataRange)>0 then                  XDataRange:=                    trunc(XDataRange/power(10,trunc(log(XDataRange)))+0.99999999)                        *power(10,trunc(log(XDataRange)))              else                  XDataRange:=                    trunc(XDataRange/power(10,trunc(log(XDataRange))-1)+0.99999999)                        *power(10,trunc(log(XDataRange))-1);                            AxisInfo.DataRect.Right:=AxisInfo.DataRect.Left+XDataRange;           end;                    if AxisInfo.YLog<>0 then           begin              AxisInfo.DataRect.Top:=power(10,round(log(AxisInfo.DataRect.Top)));              AxisInfo.DataRect.Bottom:=power(10,round(log(AxisInfo.DataRect.Bottom)));           end        else           begin              AxisInfo.DataRect.Bottom:=                round(AxisInfo.DataRect.Bottom/power(10,trunc(log(YDataRange))))                    *power(10,trunc(log(YDataRange)));              YDataRange:=AxisInfo.DataRect.Top-AxisInfo.DataRect.Bottom;              if Log(YDataRange)>0 then                  YDataRange:=                    trunc(YDataRange/power(10,trunc(log(YDataRange)))+0.999999999)                        *power(10,trunc(log(YDataRange)))              else                  YDataRange:=                    trunc(YDataRange/power(10,trunc(log(YDataRange))-1)+0.999999999)                        *power(10,trunc(log(YDataRange))-1);             AxisInfo.DataRect.Top:= AxisInfo.DataRect.Bottom+YDataRange;           end;                            if AxisInfo.DataRect.Right=AxisInfo.DataRect.Left then            AxisInfo.DataRect.Right:=AxisInfo.DataRect.Left*10;        if AxisInfo.DataRect.top=AxisInfo.DataRect.bottom then            AxisInfo.DataRect.top:=AxisInfo.DataRect.bottom*10;        XDataRange:=AxisInfo.DataRect.Right-AxisInfo.DataRect.Left;        YDataRange:=AxisInfo.DataRect.Top-AxisInfo.DataRect.Bottom;      {Set up Formats of axis}            if AxisInfo.XLog<>0 then        begin          AxisInfo.Xformat.Style:=floatDecimal;          AxisInfo.Xformat.Digits:=0;        end      else        begin          if (Log(XDataRange) <= 1) and (Log(XDataRange) >= -3) then              begin                  AxisInfo.Xformat.Style:=FixedDecimal;                  AxisInfo.Xformat.Digits:=trunc(abs(Log(XDataRange))+2);              end           else              if (Log(XDataRange) > 1) and (Log(XDataRange) < 4) then              begin                  AxisInfo.Xformat.Style:=FixedDecimal;                  AxisInfo.Xformat.Digits:=0;              end             else              begin                 AxisInfo.Xformat.Style:=FloatDecimal;                 AxisInfo.Xformat.Digits:=4;              end;        end;            if AxisInfo.YLog<>0 then        begin          AxisInfo.Yformat.Style:=floatDecimal;          AxisInfo.Yformat.Digits:=0;        end      else        begin          if (Log(YDataRange) <= 1) and (Log(YDataRange) >= -3) then              begin                  AxisInfo.Yformat.Style:=FixedDecimal;                  AxisInfo.Yformat.Digits:=round(abs(Log(YDataRange))+2);              end           else              if (Log(YDataRange) > 1) and (Log(YDataRange) < 4) then              begin                  AxisInfo.Yformat.Style:=FixedDecimal;                  AxisInfo.Yformat.Digits:=0;              end             else              begin                 AxisInfo.Yformat.Style:=FloatDecimal;                 AxisInfo.Yformat.Digits:=4;              end;        end;     {Get font Sizes}                        TextFont(AxisInfo.XFontNumber);        TextSize(AxisInfo.XFontSize);        TextFace(AxisInfo.XFontStyle);               GetFontInfo(Finfo);                XFontHeight:=Finfo.Ascent;                TextFont(AxisInfo.YFontNumber);        TextSize(AxisInfo.YFontSize);        TextFace(AxisInfo.YFontStyle);        GetFontInfo(Finfo);        YFontHeight:=Finfo.Ascent;                TextFont(AxisInfo.TitleFontNumber);        TextSize(AxisInfo.TitleFontSize);        TextFace(AxisInfo.TitleFontStyle);        GetFontInfo(Finfo);        TitleFontHeight:=Finfo.Ascent+Finfo.Descent;        TextFont(AxisInfo.NoteFontNumber);        TextSize(AxisInfo.NoteFontSize);        TextFace(AxisInfo.NoteFontStyle);        GetFontInfo(Finfo);        NoteFontHeight:=Finfo.Ascent+Finfo.Descent;        {Get Maximuim string Leanght}                Num2Str(AxisInfo.Xformat,AxisInfo.DataRect.Left, TheString);        MaxXFontWidth:=StringWidth(TheString);        Num2Str(AxisInfo.Xformat,AxisInfo.DataRect.Right, TheString);        if StringWidth(TheString)>MaxXFontWidth then            MaxXFontWidth:=StringWidth(TheString);                Num2Str(AxisInfo.Yformat,AxisInfo.DataRect.Bottom, TheString);        MaxYFontWidth:=StringWidth(TheString);        Num2Str(AxisInfo.Yformat,AxisInfo.DataRect.Top, TheString);        if StringWidth(TheString)>MaxYFontWidth then            MaxYFontWidth:=StringWidth(TheString);                    {Set Display Rect}        AxisInfo.DisplayRect:=TheWindow^.PortRect;                AxisInfo.DisplayRect.Top:=AxisInfo.DisplayRect.Top+TitleFontHeight+2*AxisInfo.Spacing;        AxisInfo.DisplayRect.Bottom:=AxisInfo.DisplayRect.Bottom-NoteFontHeight-XFontHeight-            3*AxisInfo.Spacing-AxisInfo.MajorTick;        AxisInfo.DisplayRect.Right:=AxisInfo.DisplayRect.Right-AxisInfo.Spacing-MaxXFontWidth;              AxisInfo.DisplayRect.Left:=AxisInfo.DisplayRect.Left+MaxYFontWidth+3*AxisInfo.Spacing+AxisInfo.MajorTick;                XDisplayRange:=AxisInfo.DisplayRect.Right-AxisInfo.DisplayRect.Left;        YDisplayRange:=AxisInfo.DisplayRect.bottom-AxisInfo.DIsplayRect.top;        {Set Increment}                AxisInfo.XIncrement:=(XDataRange/trunc((XDisplayRange/MaxXFontWidth)-1))+            (XDataRange/trunc((XDisplayRange/AxisInfo.Spacing)-1));        AxisInfo.YIncrement:=(YDataRange/trunc((YDisplayRange/YFontheight)-1))+            (YDataRange/trunc((YDisplayRange/AxisInfo.Spacing)-1));        if log(AxisInfo.XIncrement)< 0 then           Case trunc(AxisInfo.XIncrement/power(10,trunc(log(AxisInfo.XIncrement))-1)+0.999999999) of           0..1:AxisInfo.XIncrement:=0.1*Power(10,Trunc(Log(AxisInfo.XIncrement)));           2:AxisInfo.XIncrement:=0.2*Power(10,Trunc(Log(AxisInfo.XIncrement)));           3..5:AxisInfo.XIncrement:=0.5*Power(10,Trunc(Log(AxisInfo.XIncrement)));           6..9:AxisInfo.XIncrement:=1*Power(10,Trunc(Log(AxisInfo.XIncrement)));           end        else            Case trunc(AxisInfo.XIncrement/power(10,trunc(log(AxisInfo.XIncrement)))+0.999999999) of            0..1:AxisInfo.XIncrement:=1*Power(10,Trunc(Log(AxisInfo.XIncrement)));            2:AxisInfo.XIncrement:=2*Power(10,Trunc(Log(AxisInfo.XIncrement)));            3..5:AxisInfo.XIncrement:=5*Power(10,Trunc(Log(AxisInfo.XIncrement)));            6..9:AxisInfo.XIncrement:=10*Power(10,Trunc(Log(AxisInfo.XIncrement)));            end;                    if log(AxisInfo.YIncrement)< 0 then                   Case trunc(AxisInfo.YIncrement/power(10,trunc(log(AxisInfo.YIncrement))-1)+0.999999999) of            0..1:AxisInfo.YIncrement:=0.1*Power(10,Trunc(Log(AxisInfo.YIncrement)));            2:AxisInfo.YIncrement:=0.2*Power(10,Trunc(Log(AxisInfo.YIncrement)));            3..5:AxisInfo.YIncrement:=0.5*Power(10,Trunc(Log(AxisInfo.YIncrement)));            6..9:AxisInfo.YIncrement:=1*Power(10,Trunc(Log(AxisInfo.YIncrement)));            end        else            Case trunc(AxisInfo.YIncrement/power(10,trunc(log(AxisInfo.YIncrement)))+0.999999999) of            0..1:AxisInfo.YIncrement:=1*Power(10,Trunc(Log(AxisInfo.YIncrement)));            2:AxisInfo.YIncrement:=2*Power(10,Trunc(Log(AxisInfo.YIncrement)));            3..5:AxisInfo.YIncrement:=5*Power(10,Trunc(Log(AxisInfo.YIncrement)));            6..9:AxisInfo.YIncrement:=10*Power(10,Trunc(Log(AxisInfo.YIncrement)));            end;       {Set Tick Marks}                     AxisInfo.XMajorTicks:=round(XDataRange/AxisInfo.XIncrement);       AxisInfo.YMajorTicks:=round(YDataRange/AxisInfo.YIncrement);              case trunc(XDisplayRange/AxisInfo.XMajorTicks) of           0..5:AxisInfo.XMinorTicks:=0;           5..10:AxisInfo.XMinorTicks:=1;           10..20:AxisInfo.XMinorTicks:=2;           20..70:AxisInfo.XMinorTicks:=5;           otherwise                AxisInfo.XMinorTicks:=10;       end;              case trunc(YDisplayRange/AxisInfo.YMajorTicks) of           0..5:AxisInfo.YMinorTicks:=0;           5..10:AxisInfo.YMinorTicks:=1;           10..20:AxisInfo.YMinorTicks:=2;           20..70:AxisInfo.YMinorTicks:=5;           otherwise                AxisInfo.YMinorTicks:=10;       end;    end;    procedure DrawAxis{(AxisInfo:AxisInfoType;                TheWindow:WindowPtr)};     var        XDisplayRange,YDisplayRange:Real;        XDataRange,YDataRange:Real;        XDisplayMajorStep,YDisplayMajorStep:Real;        XDisplayMinorStep,YDisplayMinorStep:Real;        XDisplayNumberStep,YDisplayNumberStep:Real;        XDataStep,YDataStep:Real;        i,j:integer;        TheString:str255;        FInfo : FontInfo;        OldPort:WindowPtr;         begin     CheckAxisinfo(AxisInfo);          GetPort(OldPort);     SetPort(TheWindow);          if AxisInfo.XLog<>0 then        begin           AxisInfo.DataRect.Right:=round(log(AxisInfo.DataRect.Right));           AxisInfo.DataRect.Left:=round(log(AxisInfo.DataRect.Left));        end;             if AxisInfo.YLog<>0 then        begin           AxisInfo.DataRect.Top:=round(log(AxisInfo.DataRect.Top));           AxisInfo.DataRect.Bottom:=round(log(AxisInfo.DataRect.Bottom));        end;             PenSize(AxisInfo.LineSize,AxisInfo.LineSize);          XDisplayRange:=AxisInfo.DisplayRect.Right-AxisInfo.DisplayRect.Left;     YDisplayRange:=AxisInfo.DisplayRect.Top-AxisInfo.DIsplayRect.Bottom;     XDataRange:=AxisInfo.DataRect.Right-AxisInfo.DataRect.Left;     YDataRange:=AxisInfo.DataRect.Top-AxisInfo.DataRect.Bottom;      if AxisInfo.XLog<>0 then        AxisInfo.XMajorTicks:=round(XDataRange);     if AxisInfo.YLog<>0 then        AxisInfo.YMajorTicks:=round(YDataRange);         if AxisInfo.XLog<>0 then        XDataStep:=XDataRange     else        XDataStep:=XDataRange/AxisInfo.XIncrement;     if AxisInfo.YLog<>0 then        YDataStep:=YDataRange     else        YDataStep:=YDataRange/AxisInfo.YIncrement;     XDisplayNumberStep:=XDisplayRange/XDataStep;         YDisplayNumberStep:=YDisplayRange/YDataStep;     if AxisInfo.XLog<>0 then        XDisplayMajorStep:=XDisplayRange/XDataRange     else        XDisplayMajorStep:=XDisplayRange/AxisInfo.XMajorTicks;             if AxisInfo.YLog<>0 then                YDisplayMajorStep:=YDisplayRange/YDataRange     else        YDisplayMajorStep:=YDisplayRange/AxisInfo.YMajorTicks;     if AxisInfo.XLog=0 then        XDisplayMinorStep:=XDisplayRange/(AxisInfo.XMinorTicks*AxisInfo.XMajorTicks);     if AxisInfo.YLog=0 then             YDisplayMinorStep:=YDisplayRange/(AxisInfo.YMinorTicks*AxisInfo.YMajorTicks);     for i:=0 to AxisInfo.XMajorTicks do        begin            PenPat(MyPatterns[AxisInfo.LinePattern]);            MoveTo(round(AxisInfo.DisplayRect.Left+(i*XDisplayMajorStep)),AxisInfo.DisplayRect.Bottom+AxisInfo.MajorTick);            Line(0,-AxisInfo.MajorTick);            if AxisInfo.XGridMajor>0 then                begin                    PenPat(MyPatterns[AxisInfo.XGridMajor]);                    Line(0,Round(YDisplayRange));                    Move(0,-Round(YDisplayRange))                end;                         if i<>AxisInfo.XMajorTicks then             begin                if AxisInfo.XLog<>0 then                 for j:=2 to 9 do                     begin                         PenPat(MyPatterns[AxisInfo.LinePattern]);                         MoveTo(Round(AxisInfo.DisplayRect.Left+(i*XDisplayMajorStep)+XDisplayMajorStep*log(j)),                            AxisInfo.DisplayRect.Bottom+AxisInfo.MinorTick);                         Line(0,-AxisInfo.MinorTick);                           if AxisInfo.XGridMinor<>0 then                             begin                                 PenPat(MyPatterns[AxisInfo.XGridMinor]);                                 Line(0,Round(YDisplayRange));                                 Move(0,-Round(YDisplayRange))                             end;                      end                 else                    for j:=1 to AxisInfo.XMinorTicks-1 do                        begin                            PenPat(MyPatterns[AxisInfo.LinePattern]);                            MoveTo(Round(AxisInfo.DisplayRect.Left+(i*XDisplayMajorStep)+(j*XDisplayMinorStep)),                                AxisInfo.DisplayRect.Bottom+AxisInfo.MinorTick);                            Line(0,-AxisInfo.MinorTick);                              if AxisInfo.XGridMinor<>0 then                                begin                                    PenPat(MyPatterns[AxisInfo.XGridMinor]);                                    Line(0,Round(YDisplayRange));                                    Move(0,-Round(YDisplayRange))                                end;                        end;              end;        end;             for i:=0 to AxisInfo.YMajorTicks do        begin            PenPat(MyPatterns[AxisInfo.LinePattern]);            MoveTo(AxisInfo.DisplayRect.Left-AxisInfo.MajorTick,                Round(AxisInfo.DisplayRect.Bottom+(i*YDisplayMajorStep)));            Line(+AxisInfo.MajorTick,0);              if AxisInfo.YGridMajor<>0 then                begin                    PenPat(MyPatterns[AxisInfo.YGridMajor]);                    Line(Round(XDisplayRange),0);                    Move(-Round(XDisplayRange),0)                end;                           if i<>AxisInfo.YMajorTicks then                if AxisInfo.YLog<>0 then                    for j:=2 to 9 do                         begin                             PenPat(MyPatterns[AxisInfo.LinePattern]);                             MoveTo(AxisInfo.DisplayRect.left-AxisInfo.MinorTick,                                Round(AxisInfo.DisplayRect.Bottom+(i*YDisplayMajorStep)+YDisplayMajorStep*log(j)));                             Line(+AxisInfo.MinorTick,0);                             if AxisInfo.YGridMinor<>0 then                               begin                                   PenPat(MyPatterns[AxisInfo.YGridMinor]);                                   Line(Round(XDisplayRange),0);                                   Move(-Round(XDisplayRange),0)                               end;                          end                 else                       for j:=1 to AxisInfo.YMinorTicks-1 do                          begin                              PenPat(MyPatterns[AxisInfo.LinePattern]);                              MoveTo(AxisInfo.DisplayRect.Left-AxisInfo.MinorTick,                                Round(AxisInfo.DisplayRect.Bottom+(j*YDisplayMinorStep)+(i*YDisplayMajorStep)));                              Line(AxisInfo.MinorTick,0);                              if AxisInfo.YGridMinor<>0 then                                begin                                    PenPat(MyPatterns[AxisInfo.YGridMinor]);                                    Line(Round(XDisplayRange),0);                                    Move(-Round(XDisplayRange),0)                                end;                          end;        end;         PenPat(MyPatterns[AxisInfo.LinePattern]);          MoveTo(AxisInfo.DisplayRect.left,AxisInfo.DisplayRect.bottom);     lineTo(AxisInfo.DisplayRect.right,AxisInfo.DisplayRect.bottom);     lineTo(AxisInfo.DisplayRect.right,AxisInfo.DisplayRect.top);     lineTo(AxisInfo.DisplayRect.left,AxisInfo.DisplayRect.top);     lineTo(AxisInfo.DisplayRect.left,AxisInfo.DisplayRect.bottom);     TextFont(AxisInfo.XFontNumber);     TextSize(AxisInfo.XFontSize);     TextFace(AxisInfo.XFontStyle);          GetFontInfo(FInfo);     for i:=0 to Round(XDataStep) do        begin            if AxisInfo.XLog<>0 then                Num2Str(AxisInfo.Xformat,power(10,AxisInfo.DataRect.Left+i), TheString)            else                Num2Str(AxisInfo.Xformat,AxisInfo.DataRect.Left+(i*AxisInfo.XIncrement), TheString);            MoveTo(Round(AxisInfo.DisplayRect.Left-StringWidth(TheString)/2+(i*XDisplayNumberStep)),                AxisInfo.DisplayRect.Bottom+AxisInfo.MajorTick+FInfo.ascent+AxisInfo.Spacing);            Drawstring(TheString);        end;          TextFont(AxisInfo.YFontNumber);     TextSize(AxisInfo.YFontSize);     TextFace(AxisInfo.YFontStyle);         GetFontInfo(FInfo);     for i:=0 to Round(YDataStep) do        begin            if AxisInfo.YLog<>0 then                Num2Str(AxisInfo.Yformat,power(10,AxisInfo.DataRect.Bottom+i), TheString)            else                Num2Str(AxisInfo.Yformat,AxisInfo.DataRect.Bottom+(i*AxisInfo.YIncrement), TheString);            MoveTo(AxisInfo.DisplayRect.Left-AxisInfo.MajorTick-AxisInfo.Spacing-StringWidth(TheSTring),                Round(AxisInfo.DisplayRect.Bottom+(i*YDisplayNumberStep)+FInfo.ascent/2));            DrawString(TheString);        end;               TextFont(AxisInfo.TitleFontNumber);     TextSize(AxisInfo.TitleFontSize);     TextFace(AxisInfo.TitleFontStyle);         GetFontInfo(FInfo);          MoveTo(Round(AxisInfo.DisplayRect.Left+XDisplayRange/2-StringWidth(AxisInfo.Title)/2),        AxisInfo.DisplayRect.Top-AxisInfo.Spacing-FInfo.Descent);          Drawstring(AxisInfo.Title);     TextFont(AxisInfo.NoteFontNumber);     TextSize(AxisInfo.NoteFontSize);     TextFace(AxisInfo.NoteFontStyle);     GetFontInfo(FInfo);          MoveTo(Round(AxisInfo.DisplayRect.Left+XDisplayRange/2-StringWidth(AxisInfo.note)/2),        AxisInfo.DisplayRect.Bottom+FInfo.Ascent+AxisInfo.MajorTick+2*AxisInfo.Spacing);          TextFont(AxisInfo.XFontNumber);     TextSize(AxisInfo.XFontSize);     TextFace(AxisInfo.XFontStyle);     TextFont(AxisInfo.NoteFontNumber);     TextSize(AxisInfo.NoteFontSize);     TextFace(AxisInfo.NoteFontStyle);     GetFontInfo(FInfo);     Move(0,FInfo.Ascent+FInfo.Descent);     Drawstring(AxisInfo.Note);          SetPort(OldPort); end;Procedure SaveAxisAsText {(var Axisinfo : AxisinfoType;          Reply:SFReply;          var OutPut:Text)};		begin		 with AxisInfo do				begin        Writeln(Output,DisplayRect.top);        Writeln(Output,DisplayRect.Bottom);        Writeln(Output,DisplayRect.Left);        Writeln(Output,DisplayRect.Right);        Writeln(Output,DataRect.top:9:9);        Writeln(Output,DataRect.Bottom:9:9);        Writeln(Output,DataRect.Left:9:9);        Writeln(Output,DataRect.Right:9:9);                Writeln(Output,XLog);        Writeln(Output,YLog);                Writeln(Output,XMinorTicks);        Writeln(Output,YMinorTicks);        Writeln(Output,XMajorTicks);        Writeln(Output,YMajorTicks);                Writeln(Output,XIncrement:9);        Writeln(Output,YIncrement:9);                Writeln(Output,XGridMinor);        Writeln(Output,YGridMinor);        Writeln(Output,XGridMajor);        Writeln(Output,YGridMajor);                Writeln(Output,XFormat.digits);        Writeln(Output,Byte(XFormat.Style));                Writeln(Output,YFormat.digits);        Writeln(Output,Byte(YFormat.Style));                Writeln(Output,Spacing);        Writeln(Output,MinorTick);        Writeln(Output,MajorTick);        Writeln(Output,LineSize);        Writeln(Output,LinePattern);                Writeln(Output,XFontNumber);        Writeln(Output,XFontSize);        {Writeln(Output,word(XFontStyle));}                Writeln(Output,YFontNumber);        Writeln(Output,YFontSize);        {Writeln(Output,Byte(YFontStyle));}                Writeln(Output,Title);        Writeln(Output,TitleFontNumber);        Writeln(Output,TitleFontSize);        {Writeln(Output,TitleFontStyle);}                Writeln(Output,note);        Writeln(Output,NoteFontNumber);        Writeln(Output,NoteFontSize);        {Writeln(Output,NoteFontStyle);}				end;		end;Procedure LoadAxisAsText {(var Axisinfo : AxisinfoType;          Reply:SFReply;          var Input:Text)};  var     TheByte:Byte;  		begin		 with AxisInfo do				begin        Readln(Input,DisplayRect.top);        Readln(Input,DisplayRect.Bottom);        Readln(Input,DisplayRect.Left);        Readln(Input,DisplayRect.Right);        Readln(Input,DataRect.top);        Readln(Input,DataRect.Bottom);        Readln(Input,DataRect.Left);        Readln(Input,DataRect.Right);                Readln(Input,XLog);        Readln(Input,YLog);                Readln(Input,XMinorTicks);        Readln(Input,YMinorTicks);        Readln(Input,XMajorTicks);        Readln(Input,YMajorTicks);                Readln(Input,XIncrement);        Readln(Input,YIncrement);                Readln(Input,XGridMinor);        Readln(Input,YGridMinor);        Readln(Input,XGridMajor);        Readln(Input,YGridMajor);                Readln(Input,XFormat.digits);        Readln(Input,TheByte);                Readln(Input,YFormat.digits);        Readln(Input,TheByte);                Readln(Input,Spacing);        Readln(Input,MinorTick);        Readln(Input,MajorTick);        Readln(Input,LineSize);        Readln(Input,LinePattern);                Readln(Input,XFontNumber);        Readln(Input,XFontSize);        {Readln(Input,XFontStyle);}                Readln(Input,YFontNumber);        Readln(Input,YFontSize);        {Readln(Input,YFontStyle);}                Readln(Input,Title);        Readln(Input,TitleFontNumber);        Readln(Input,TitleFontSize);        {Readln(Input,TitleFontStyle);}                Readln(Input,note);        Readln(Input,NoteFontNumber);        Readln(Input,NoteFontSize);        {Readln(Input,NoteFontStyle);}				end;		end; begin end.